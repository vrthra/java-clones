		return result;	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
=====================================================================
cat sim.tight/springfaces.jpatterns/7.i.0
cat sim.tight/springfaces.jpatterns/7.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/Ektorp.jcommander/9.i.0
cat sim.tight/Ektorp.jcommander/9.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/query.caelum-stella/9.i.0
cat sim.tight/query.caelum-stella/9.m.0
         return result;      }

      @Override
      public boolean equals(Object obj)
      {
         if (this == obj)
            return true;
         if (obj == null)
            return false;
         if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/query.extensions/9.i.0
cat sim.tight/query.extensions/9.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/fastjson.jpatterns/9.i.0
cat sim.tight/fastjson.jpatterns/9.m.0
			return result;		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
=====================================================================
cat sim.tight/Ektorp.nosql-unit/9.i.0
cat sim.tight/Ektorp.nosql-unit/9.m.0
        case '1':        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
=====================================================================
cat sim.tight/loop.WebWorks/6.i.0
cat sim.tight/loop.WebWorks/6.m.0
       return result;    }

    @Override
    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
       if (getClass() != obj.getClass())
          return false;
=====================================================================
cat sim.tight/fastjson.functionaljava/9.i.0
cat sim.tight/fastjson.functionaljava/9.m.0
    @Override    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
       if (getClass() != obj.getClass())
          return false;
=====================================================================
cat sim.tight/fastjson.functionaljava/8.i.0
cat sim.tight/fastjson.functionaljava/8.m.0
    @Override    public boolean equals(Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
=====================================================================
cat sim.tight/leveldb.testng/6.i.0
cat sim.tight/leveldb.testng/6.m.0
         return result;      }

      @Override
      public boolean equals(Object obj)
      {
         if (this == obj)
            return true;
         if (obj == null)
            return false;
         if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/JDBM3.extensions/9.i.0
cat sim.tight/JDBM3.extensions/9.m.0
    public int getWidth() {        return width;
    }

    /**
     * Sets the width of the chart in pixels. Note that the Google Charting API currently only supports a maximum
     * of 300,000 pixels for display, so width X height must be less than 300,000.
     *
     * @param width the width of the chart in pixels.
     */
    public void setWidth(int width) {
        this.width = width;
    }

    /**
     * Gets the height of the chart that will be displayed
     *
     * @return The height of the chart in pixels, defaults to 400.
     */
    public int getHeight() {
        return height;
    }

    /**
     * Sets the height of the chart in pixels. Note that the Google Charting API currently only supports a maximum
     * of 300,000 pixels for display, so width X height must be less than 300,000.
     *
     * @param height the height of the chart in pixels.
     */
    public void setHeight(int height) {
        this.height = height;
=====================================================================
cat sim.tight/perf4j.SpoutcraftAPI/8.i.0
cat sim.tight/perf4j.SpoutcraftAPI/8.m.0
         return result;      }

      @Override
      public boolean equals(Object obj)
      {
         if (this == obj)
            return true;
         if (obj == null)
            return false;
         if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/Ektorp.extensions/9.i.0
cat sim.tight/Ektorp.extensions/9.m.0
            case '0':            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
=====================================================================
cat sim.tight/fastjson.stringtemplate4/10.i.0
cat sim.tight/fastjson.stringtemplate4/10.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.testng/6.i.0
cat sim.tight/citrus.testng/6.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/citrus.testng/9.i.0
cat sim.tight/citrus.testng/9.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/citrus.testng/7.i.0
cat sim.tight/citrus.testng/7.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.testng/8.i.0
cat sim.tight/citrus.testng/8.m.0
		return result;	}

	@Override
	public boolean equals(final Object obj)
	{
		if (this == obj)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
=====================================================================
cat sim.tight/springfaces.jesque/7.i.0
cat sim.tight/springfaces.jesque/7.m.0
    @Override    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
=====================================================================
cat sim.tight/jargs.testng/6.i.0
cat sim.tight/jargs.testng/6.m.0
       return result;    }

    @Override
    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
       if (getClass() != obj.getClass())
          return false;
=====================================================================
cat sim.tight/query.functionaljava/9.i.0
cat sim.tight/query.functionaljava/9.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/query.functionaljava/8.i.0
cat sim.tight/query.functionaljava/8.m.0
  public String getUsername() {    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
=====================================================================
cat sim.tight/jbehave-core.spring-mvc-quickstart-archetype/8.i.0
cat sim.tight/jbehave-core.spring-mvc-quickstart-archetype/8.m.0
        {new JTextField(),         new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField()},
        {new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField()},
        {new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField(),
         new JTextField()},
=====================================================================
cat sim.tight/css-selectors.Moneychanger/21.i.0
cat sim.tight/css-selectors.Moneychanger/21.m.0
              case '0':              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
=====================================================================
cat sim.tight/jgit.nbscala/10.i.0
cat sim.tight/jgit.nbscala/10.m.0
        case '0':        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
=====================================================================
cat sim.tight/jgit.nbscala/8.i.0
cat sim.tight/jgit.nbscala/8.m.0
                            case 'A':                            case 'B':
                            case 'C':
                            case 'D':
                            case 'E':
                            case 'F':
                            case 'G':
                            case 'H':
                            case 'I':
                            case 'J':
                            case 'K':
                            case 'L':
                            case 'M':
                            case 'N':
                            case 'O':
                            case 'P':
                            case 'Q':
                            case 'R':
                            case 'S':
                            case 'T':
                            case 'U':
=====================================================================
cat sim.tight/css-selectors.antlr/21.i.0
cat sim.tight/css-selectors.antlr/21.m.0
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
=====================================================================
cat sim.tight/css-selectors.antlr/20.i.0
cat sim.tight/css-selectors.antlr/20.m.0
        case '1':        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
=====================================================================
cat sim.tight/loop.jline2/6.i.0
cat sim.tight/loop.jline2/6.m.0
    @Override    public boolean equals(Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
=====================================================================
cat sim.tight/git-like-cli.testng/6.i.0
cat sim.tight/git-like-cli.testng/6.m.0
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URL
=====================================================================
cat sim.tight/pangool.storm-contrib/6.i.0
cat sim.tight/pangool.storm-contrib/6.m.0
          default:            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
=====================================================================
cat sim.tight/pangool.storm-contrib/17.i.0
cat sim.tight/pangool.storm-contrib/17.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.restfb/6.i.0
cat sim.tight/citrus.restfb/6.m.0
      return result;    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
=====================================================================
cat sim.tight/citrus.restfb/9.i.0
cat sim.tight/citrus.restfb/9.m.0
      return result;    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
=====================================================================
cat sim.tight/citrus.restfb/7.i.0
cat sim.tight/citrus.restfb/7.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.restfb/8.i.0
cat sim.tight/citrus.restfb/8.m.0
       return result;    }

    @Override
    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
       if (getClass() != obj.getClass())
          return false;
=====================================================================
cat sim.tight/JDBM3.functionaljava/9.i.0
cat sim.tight/JDBM3.functionaljava/9.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/JDBM3.functionaljava/8.i.0
cat sim.tight/JDBM3.functionaljava/8.m.0
		return result;	}

	@Override
	public boolean equals(final Object obj)
	{
		if (this == obj)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (getClass() != obj.getClass())
		{
			return false;
=====================================================================
cat sim.tight/fastjson.jesque/9.i.0
cat sim.tight/fastjson.jesque/9.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/query.cdk/8.i.0
cat sim.tight/query.cdk/8.m.0
    @Override    public boolean equals(final Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/Ektorp.json-schema-validator/8.i.0
cat sim.tight/Ektorp.json-schema-validator/8.m.0
    public static void main(String args[]) {        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
=====================================================================
cat sim.tight/JTailPlus.Moneychanger/7.i.0
cat sim.tight/JTailPlus.Moneychanger/7.m.0
	public String getFirstName() {		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
=====================================================================
cat sim.tight/spring-data-commons.hector-jpa/8.i.0
cat sim.tight/spring-data-commons.hector-jpa/8.m.0
       return result;    }

    @Override
    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
       if (getClass() != obj.getClass())
          return false;
=====================================================================
cat sim.tight/Ektorp.functionaljava/9.i.0
cat sim.tight/Ektorp.functionaljava/9.m.0
	@Override	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
=====================================================================
cat sim.tight/Ektorp.functionaljava/8.i.0
cat sim.tight/Ektorp.functionaljava/8.m.0
    @Override    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        if (this == obj) {
            return true;
=====================================================================
cat sim.tight/citrus.json-schema-validator/6.i.0
cat sim.tight/citrus.json-schema-validator/6.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.json-schema-validator/8.i.0
cat sim.tight/citrus.json-schema-validator/8.m.0
    @Override    public boolean equals(Object obj) {
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/snacktory.CraftBukkit-Bleeding/6.i.0
cat sim.tight/snacktory.CraftBukkit-Bleeding/6.m.0
	        char[] buf = new char[1024];	        int numRead=0;
	        while((numRead=reader.read(buf)) != -1){
	            String readData = String.valueOf(buf, 0, numRead);
	            fileData.append(readData);
	            buf = new char[1024];
	        }
	        reader.close();
	        return fileData.toString();
=====================================================================
cat sim.tight/snacktory.encog-java-workbench/8.i.0
cat sim.tight/snacktory.encog-java-workbench/8.m.0
      return result;    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
=====================================================================
cat sim.tight/query.restfb/9.i.0
cat sim.tight/query.restfb/9.m.0
  private static final List<String> V = Arrays.asList("a", "b", "c", "d");
  @DataProvider
  public Object[][] variable() {
    return new Object[][] {
        new Object[] { 0, V.subList(0, 0), V },
        new Object[] { 1, V.subList(0, 1), V.subList(1, 4) },
        new Object[] { 2, V.subList(0, 2), V.subList(2, 4) },
        new Object[] { 3, V.subList(0, 3), V.subList(3, 4) },
        new Object[] { 4, V.subList(0, 4), V.subList(4, 4) },
=====================================================================
cat sim.tight/git-like-cli.jcommander/9.i.0
cat sim.tight/git-like-cli.jcommander/9.m.0
    Assert.assertEquals(args.debug, expected);  }

  public void booleanArity1() {
    argsBoolean1(new String[] {}, Boolean.FALSE);
    argsBoolean1(new String[] { "-debug", "true" }, Boolean.TRUE);
  }

  public void booleanArity0() {
    argsBoolean0(new String[] {}, Boolean.FALSE);
    argsBoolean0(new String[] { "-debug"}, Boolean.TRUE);
=====================================================================
cat sim.tight/git-like-cli.jcommander/7.i.0
cat sim.tight/git-like-cli.jcommander/7.m.0
    @DataProvider    public static Object[][] f()
    {
        return new Integer[][]{
                new Integer[]{3, 5, 1},
                new Integer[]{3, 8, 1},
                new Integer[]{3, 12, 2},
                new Integer[]{8, 12, 2},
                new Integer[]{9, 10, 1},
=====================================================================
cat sim.tight/git-like-cli.jcommander/8.i.0
cat sim.tight/git-like-cli.jcommander/8.m.0
                case 'a':                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
=====================================================================
cat sim.tight/css-selectors.stringtemplate4/21.i.0
cat sim.tight/css-selectors.stringtemplate4/21.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/Ektorp.caelum-stella/9.i.0
cat sim.tight/Ektorp.caelum-stella/9.m.0
			return result;		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
=====================================================================
cat sim.tight/springfaces.nosql-unit/7.i.0
cat sim.tight/springfaces.nosql-unit/7.m.0
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
=====================================================================
cat sim.tight/droolsjbpm-integration.Moneychanger/28.i.0
cat sim.tight/droolsjbpm-integration.Moneychanger/28.m.0
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
=====================================================================
cat sim.tight/droolsjbpm-integration.stringtemplate4/26.i.0
cat sim.tight/droolsjbpm-integration.stringtemplate4/26.m.0
    @Override    public boolean equals(final Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/fastjson.json-schema-validator/8.i.0
cat sim.tight/fastjson.json-schema-validator/8.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/JDBM3.jPOS/9.i.0
cat sim.tight/JDBM3.jPOS/9.m.0
  public Long getId() {    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
=====================================================================
cat sim.tight/jbehave-core.fb-tools/8.i.0
cat sim.tight/jbehave-core.fb-tools/8.m.0
    @Override    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/droolsjbpm-integration.CraftBukkit/6.i.0
cat sim.tight/droolsjbpm-integration.CraftBukkit/6.m.0
    public String getNumber() {        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
=====================================================================
cat sim.tight/fastjson.spring-mvc-31-demo/8.i.0
cat sim.tight/fastjson.spring-mvc-31-demo/8.m.0
            return false;        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
=====================================================================
cat sim.tight/fastjson.droolsjbpm-knowledge/6.i.0
cat sim.tight/fastjson.droolsjbpm-knowledge/6.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/config-magic.jcommander/9.i.0
cat sim.tight/config-magic.jcommander/9.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.jcommander/8.i.0
cat sim.tight/config-magic.jcommander/8.m.0
        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
=====================================================================
cat sim.tight/JTailPlus.nbscala/6.i.0
cat sim.tight/JTailPlus.nbscala/6.m.0
            boolean[] canEdit = new boolean [] {                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
=====================================================================
cat sim.tight/JTailPlus.nbscala/7.i.0
cat sim.tight/JTailPlus.nbscala/7.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/JDBM3.jcommander/9.i.0
cat sim.tight/JDBM3.jcommander/9.m.0
      return result;    }


    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
=====================================================================
cat sim.tight/springfaces.hector-jpa/7.i.0
cat sim.tight/springfaces.hector-jpa/7.m.0
			return result;		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
=====================================================================
cat sim.tight/config-magic.nosql-unit/9.i.0
cat sim.tight/config-magic.nosql-unit/9.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.nosql-unit/8.i.0
cat sim.tight/config-magic.nosql-unit/8.m.0
    public Long getId() {        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
=====================================================================
cat sim.tight/query.spring-mvc-quickstart-archetype/6.i.0
cat sim.tight/query.spring-mvc-quickstart-archetype/6.m.0
public class AppTest     extends TestCase
{
    /**
     * Create the test case
     *
     * @param testName name of the test case
     */
    public AppTest( String testName )
    {
        super( testName );
    }

    /**
     * @return the suite of tests being tested
     */
    public static Test suite()
    {
        return new TestSuite( AppTest.class );
    }

    /**
     * Rigourous Test :-)
     */
    public void testApp()
    {
        assertTrue( true );
=====================================================================
cat sim.tight/JEmailer.cassandra-tutorial/8.i.0
cat sim.tight/JEmailer.cassandra-tutorial/8.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/citrus.extensions/6.i.0
cat sim.tight/citrus.extensions/6.m.0
         return result;      }

      @Override
      public boolean equals(Object obj)
      {
         if (this == obj)
            return true;
         if (obj == null)
            return false;
         if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/citrus.extensions/9.i.0
cat sim.tight/citrus.extensions/9.m.0
         return result;      }

      @Override
      public boolean equals(Object obj)
      {
         if (this == obj)
            return true;
         if (obj == null)
            return false;
=====================================================================
cat sim.tight/citrus.extensions/7.i.0
cat sim.tight/citrus.extensions/7.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.extensions/8.i.0
cat sim.tight/citrus.extensions/8.m.0
    @Override    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/droolsjbpm-integration.CraftBukkitPlusPlus/6.i.0
cat sim.tight/droolsjbpm-integration.CraftBukkitPlusPlus/6.m.0
      return result;   }

   @Override
   public boolean equals(Object obj)
   {
      if(this == obj)
         return true;
      if(obj == null)
         return false;
      if(getClass() != obj.getClass())
         return false;
=====================================================================
cat sim.tight/Dempsy.extensions/9.i.0
cat sim.tight/Dempsy.extensions/9.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/Dempsy.caelum-stella/9.i.0
cat sim.tight/Dempsy.caelum-stella/9.m.0
    public boolean equals(final Object obj) {        if ( this == obj ) {
            return true;
        }
        if ( obj == null ) {
            return false;
        }
        if ( getClass() != obj.getClass() ) {
            return false;
=====================================================================
cat sim.tight/droolsjbpm-integration.restfb/7.i.0
cat sim.tight/droolsjbpm-integration.restfb/7.m.0
		ByteBuffer result;		if(old != null && length <= old.capacity()) {
			result = old;
			result.clear();
		} else {
			result = ByteBuffer.allocate(length);
=====================================================================
cat sim.tight/pangool.trevni/6.i.0
cat sim.tight/pangool.trevni/6.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/Ektorp.jPOS/9.i.0
cat sim.tight/Ektorp.jPOS/9.m.0
					case '0':					case '1':
					case '2':
					case '3':
					case '4':
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
=====================================================================
cat sim.tight/jgit.stringtemplate4/10.i.0
cat sim.tight/jgit.stringtemplate4/10.m.0
      return result;   }

   @Override
   public boolean equals(Object obj)
   {
      if(this == obj)
         return true;
      if(obj == null)
         return false;
      if(getClass() != obj.getClass())
         return false;
=====================================================================
cat sim.tight/Dempsy.jPOS/9.i.0
cat sim.tight/Dempsy.jPOS/9.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/fastjson.jPOS/9.i.0
cat sim.tight/fastjson.jPOS/9.m.0
    public String getName() {        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
=====================================================================
cat sim.tight/fastjson.dsi-tools/8.i.0
cat sim.tight/fastjson.dsi-tools/8.m.0
    final private byte[] start;    final private byte[] limit;

    public byte[] limit() {
        return limit;
    }

    public byte[] start() {
        return start;
=====================================================================
cat sim.tight/leveldb.leveldbjni/6.i.0
cat sim.tight/leveldb.leveldbjni/6.m.0
    public static byte[] bytes(String value) {        if( value == null) {
            return null;
        }
        try {
            return value.getBytes("UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }

    public static String asString(byte value[]) {
        if( value == null) {
            return null;
        }
        try {
            return new String(value, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
=====================================================================
cat sim.tight/leveldb.leveldbjni/14.i.0
cat sim.tight/leveldb.leveldbjni/14.m.0
        try {            v = new BufferedReader(new InputStreamReader(is, "UTF-8")).readLine();
        } catch (Throwable e) {
        } finally {
            try {
                is.close();
            } catch (Throwable e) {
            }
        }
        VERSION = v;
=====================================================================
cat sim.tight/leveldb.leveldbjni/8.i.0
cat sim.tight/leveldb.leveldbjni/8.m.0
    return result;  }

  /* (non-Javadoc)
   * @see java.lang.Object#equals(java.lang.Object)
   */
  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/Dempsy.hector-jpa/7.i.0
cat sim.tight/Dempsy.hector-jpa/7.m.0
		public int getId() {			return id;
		}

		public void setId(int id) {
			this.id = id;
		}

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
=====================================================================
cat sim.tight/fastjson.swagger-codegen/8.i.0
cat sim.tight/fastjson.swagger-codegen/8.m.0
            dArr[dLen - 4] = (byte) CA[i >> 12];            dArr[dLen - 3] = (byte) CA[(i >>> 6) & 0x3f];
            dArr[dLen - 2] = left == 2 ? (byte) CA[i & 0x3f] : (byte) '=';
            dArr[dLen - 1] = '=';
        }
        return dArr;
    }

    /**
     * Decodes a BASE64 encoded byte array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
     */
    public final static byte[] decode(byte[] sArr) {
        // Check special case
        int sLen = sArr.length;

        // Count illegal characters (including '\r', '\n') to know what size the
        // returned array will be,
        // so we don't have to reallocate & copy it later.
        int sepCnt = 0; // Number of separator characters. (Actually illegal
                        // characters, but that's a bonus...)
        for (int i = 0; i < sLen; i++)
            // If input is "pure" (I.e. no line separators or illegal chars)
            // base64 this loop can be commented out.
            if (IA[sArr[i] & 0xff] < 0)
                sepCnt++;

        // Check so that legal chars (including '=') are evenly divideable by 4
        // as specified in RFC 2045.
        if ((sLen - sepCnt) % 4 != 0)
            return null;

        int pad = 0;
        for (int i = sLen; i > 1 && IA[sArr[--i] & 0xff] <= 0;)
            if (sArr[i] == '=')
                pad++;

        int len = ((sLen - sepCnt) * 6 >> 3) - pad;

        byte[] dArr = new byte[len]; // Preallocate byte[] of exact length

        for (int s = 0, d = 0; d < len;) {
            // Assemble three bytes into an int from four "valid" characters.
            int i = 0;
            for (int j = 0; j < 4; j++) { // j only increased if a valid char
                                          // was found.
                int c = IA[sArr[s++] & 0xff];
                if (c >= 0)
                    i |= c << (18 - j * 6);
                else
                    j--;
            }

            // Add the bytes
            dArr[d++] = (byte) (i >> 16);
            if (d < len) {
                dArr[d++] = (byte) (i >> 8);
                if (d < len)
                    dArr[d++] = (byte) i;
            }
        }

        return dArr;
    }

    /**
     * Decodes a BASE64 encoded byte array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(byte[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
     */
    public final static byte[] decodeFast(byte[] sArr) {
        // Check special case
        int sLen = sArr.length;
        if (sLen == 0)
            return new byte[0];

        int sIx = 0, eIx = sLen - 1; // Start and end index after trimming.

        // Trim illegal chars from start
        while (sIx < eIx && IA[sArr[sIx] & 0xff] < 0)
            sIx++;

        // Trim illegal chars from end
        while (eIx > 0 && IA[sArr[eIx] & 0xff] < 0)
            eIx--;

        // get the padding count (=) (0, 1 or 2)
        int pad = sArr[eIx] == '=' ? (sArr[eIx - 1] == '=' ? 2 : 1) : 0; // Count
                                                                         // '='
                                                                         // at
                                                                         // end.
        int cCnt = eIx - sIx + 1; // Content count including possible separators
        int sepCnt = sLen > 76 ? (sArr[76] == '\r' ? cCnt / 78 : 0) << 1 : 0;

        int len = ((cCnt - sepCnt) * 6 >> 3) - pad; // The number of decoded
                                                    // bytes
        byte[] dArr = new byte[len]; // Preallocate byte[] of exact length

        // Decode all but the last 0 - 2 bytes.
        int d = 0;
        for (int cc = 0, eLen = (len / 3) * 3; d < eLen;) {
=====================================================================
cat sim.tight/fastjson.skmclauncher/49.i.0
cat sim.tight/fastjson.skmclauncher/49.m.0
            if (sepCnt > 0 && ++cc == 19) {                sIx += 2;
                cc = 0;
            }
        }

        if (d < len) {
            // Decode last 1-3 bytes (incl '=') into 1-3 bytes
            int i = 0;
            for (int j = 0; sIx <= eIx - pad; j++)
=====================================================================
cat sim.tight/fastjson.skmclauncher/6.i.0
cat sim.tight/fastjson.skmclauncher/6.m.0
            dArr[d++] = (byte) (i >> 16);            dArr[d++] = (byte) (i >> 8);
            dArr[d++] = (byte) i;

            // If line separator, jump over it.
            if (sepCnt > 0 && ++cc == 19) {
                sIx += 2;
                cc = 0;
            }
        }

        if (d < len) {
            // Decode last 1-3 bytes (incl '=') into 1-3 bytes
            int i = 0;
            for (int j = 0; sIx <= eIx - pad; j++)
                i |= IA[sArr[sIx++]] << (18 - j * 6);

            for (int r = 16; d < len; r -= 8)
                dArr[d++] = (byte) (i >> r);
        }

        return dArr;
    }

    // ****************************************************************************************
    // * byte[] version
    // ****************************************************************************************

    /**
     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
     */
    public final static byte[] encodeToByte(byte[] sArr, boolean lineSep) {
        // Check special case
        int sLen = sArr != null ? sArr.length : 0;
        if (sLen == 0)
            return new byte[0];

        int eLen = (sLen / 3) * 3; // Length of even 24-bits.
        int cCnt = ((sLen - 1) / 3 + 1) << 2; // Returned character count
        int dLen = cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0); // Length of
                                                                // returned
                                                                // array
        byte[] dArr = new byte[dLen];

        // Encode even 24-bits
        for (int s = 0, d = 0, cc = 0; s < eLen;) {
=====================================================================
cat sim.tight/fastjson.skmclauncher/22.i.0
cat sim.tight/fastjson.skmclauncher/22.m.0
            dArr[d++] = (byte) (i >> 16);            dArr[d++] = (byte) (i >> 8);
            dArr[d++] = (byte) i;

            // If line separator, jump over it.
            if (sepCnt > 0 && ++cc == 19) {
                sIx += 2;
                cc = 0;
            }
        }

        if (d < len) {
            // Decode last 1-3 bytes (incl '=') into 1-3 bytes
            int i = 0;
            for (int j = 0; sIx <= eIx - pad; j++)
                i |= IA[sArr[sIx++]] << (18 - j * 6);

            for (int r = 16; d < len; r -= 8)
                dArr[d++] = (byte) (i >> r);
        }

        return dArr;
    }

    // ****************************************************************************************
    // * String version
    // ****************************************************************************************

    /**
     * Encodes a raw byte array into a BASE64 <code>String</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
     */
    public final static String encodeToString(byte[] sArr, boolean lineSep) {
        // Reuse char[] since we can't create a String incrementally anyway and
        // StringBuffer/Builder would be slower.
        return new String(encodeToChar(sArr, lineSep));
    }

    /**
     * Decodes a BASE64 encoded <code>String</code>. All illegal characters will
     * be ignored and can handle both strings with and without line separators.<br>
     * <b>Note!</b> It can be up to about 2x the speed to call
     * <code>decode(str.toCharArray())</code> instead. That will create a
     * temporary array though. This version will use <code>str.charAt(i)</code>
     * to iterate the string.
     * 
     * @param str
     *            The source string. <code>null</code> or length 0 will return
     *            an empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
     */
    public final static byte[] decode(String str) {
        // Check special case
        int sLen = str != null ? str.length() : 0;
        if (sLen == 0)
            return new byte[0];

        // Count illegal characters (including '\r', '\n') to know what size the
        // returned array will be,
        // so we don't have to reallocate & copy it later.
        int sepCnt = 0; // Number of separator characters. (Actually illegal
                        // characters, but that's a bonus...)
        for (int i = 0; i < sLen; i++)
            // If input is "pure" (I.e. no line separators or illegal chars)
            // base64 this loop can be commented out.
            if (IA[str.charAt(i)] < 0)
                sepCnt++;

        // Check so that legal chars (including '=') are evenly divideable by 4
        // as specified in RFC 2045.
        if ((sLen - sepCnt) % 4 != 0)
            return null;

        // Count '=' at end
        int pad = 0;
        for (int i = sLen; i > 1 && IA[str.charAt(--i)] <= 0;)
            if (str.charAt(i) == '=')
                pad++;

        int len = ((sLen - sepCnt) * 6 >> 3) - pad;

        byte[] dArr = new byte[len]; // Preallocate byte[] of exact length

        for (int s = 0, d = 0; d < len;) {
            // Assemble three bytes into an int from four "valid" characters.
            int i = 0;
            for (int j = 0; j < 4; j++) { // j only increased if a valid char
                                          // was found.
                int c = IA[str.charAt(s++)];
                if (c >= 0)
                    i |= c << (18 - j * 6);
                else
                    j--;
            }
            // Add the bytes
            dArr[d++] = (byte) (i >> 16);
            if (d < len) {
                dArr[d++] = (byte) (i >> 8);
                if (d < len)
                    dArr[d++] = (byte) i;
            }
        }
        return dArr;
    }

    /**
     * Decodes a BASE64 encoded string that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(String)}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param s
     *            The source string. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
     */
    public final static byte[] decodeFast(String s) {
        // Check special case
        int sLen = s.length();
        if (sLen == 0)
            return new byte[0];

        int sIx = 0, eIx = sLen - 1; // Start and end index after trimming.

        // Trim illegal chars from start
        while (sIx < eIx && IA[s.charAt(sIx) & 0xff] < 0)
            sIx++;

        // Trim illegal chars from end
        while (eIx > 0 && IA[s.charAt(eIx) & 0xff] < 0)
            eIx--;

        // get the padding count (=) (0, 1 or 2)
        int pad = s.charAt(eIx) == '=' ? (s.charAt(eIx - 1) == '=' ? 2 : 1) : 0; // Count
                                                                                 // '='
                                                                                 // at
                                                                                 // end.
        int cCnt = eIx - sIx + 1; // Content count including possible separators
=====================================================================
cat sim.tight/fastjson.skmclauncher/56.i.0
cat sim.tight/fastjson.skmclauncher/56.m.0
            dArr[d++] = (byte) (i >> 16);            dArr[d++] = (byte) (i >> 8);
            dArr[d++] = (byte) i;

            // If line separator, jump over it.
            if (sepCnt > 0 && ++cc == 19) {
                sIx += 2;
                cc = 0;
            }
        }

        if (d < len) {
            // Decode last 1-3 bytes (incl '=') into 1-3 bytes
            int i = 0;
            for (int j = 0; sIx <= eIx - pad; j++)
                i |= IA[s.charAt(sIx++)] << (18 - j * 6);

            for (int r = 16; d < len; r -= 8)
                dArr[d++] = (byte) (i >> r);
        }

        return dArr;
=====================================================================
cat sim.tight/fastjson.skmclauncher/13.i.0
cat sim.tight/fastjson.skmclauncher/13.m.0
	private static final int[] IA = new int[256];	static {
		Arrays.fill(IA, -1);
		for (int i = 0, iS = CA.length; i < iS; i++)
			IA[CA[i]] = i;
		IA['='] = 0;
	}

	// ****************************************************************************************
	// *  char[] version
	// ****************************************************************************************

	/** Encodes a raw byte array into a BASE64 <code>char[]</code> representation i accordance with RFC 2045.
	 * @param sArr The bytes to convert. If <code>null</code> or length 0 an empty array will be returned.
	 * @param lineSep Optional "\r\n" after 76 characters, unless end of file.<br>
	 * No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a
	 * little faster.
	 * @return A BASE64 encoded array. Never <code>null</code>.
	 */
	public final static char[] encodeToChar(byte[] sArr, boolean lineSep)
	{
		// Check special case
		int sLen = sArr != null ? sArr.length : 0;
		if (sLen == 0)
			return new char[0];

		int eLen = (sLen / 3) * 3;              // Length of even 24-bits.
		int cCnt = ((sLen - 1) / 3 + 1) << 2;   // Returned character count
		int dLen = cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0); // Length of returned array
		char[] dArr = new char[dLen];

		// Encode even 24-bits
		for (int s = 0, d = 0, cc = 0; s < eLen;) {
=====================================================================
cat sim.tight/fastjson.skmclauncher/14.i.0
cat sim.tight/fastjson.skmclauncher/14.m.0
			dArr[d++] = CA[(i >>> 18) & 0x3f];			dArr[d++] = CA[(i >>> 12) & 0x3f];
			dArr[d++] = CA[(i >>> 6) & 0x3f];
			dArr[d++] = CA[i & 0x3f];

			// Add optional line separator
			if (lineSep && ++cc == 19 && d < dLen - 2) {
				dArr[d++] = '\r';
				dArr[d++] = '\n';
				cc = 0;
			}
		}

		// Pad and encode last bits if source isn't even 24 bits.
		int left = sLen - eLen; // 0 - 2.
		if (left > 0) {
=====================================================================
cat sim.tight/fastjson.skmclauncher/10.i.0
cat sim.tight/fastjson.skmclauncher/10.m.0
			dArr[dLen - 4] = CA[i >> 12];			dArr[dLen - 3] = CA[(i >>> 6) & 0x3f];
			dArr[dLen - 2] = left == 2 ? CA[i & 0x3f] : '=';
			dArr[dLen - 1] = '=';
		}
		return dArr;
	}

	/** Decodes a BASE64 encoded char array. All illegal characters will be ignored and can handle both arrays with
	 * and without line separators.
	 * @param sArr The source array. <code>null</code> or length 0 will return an empty array.
	 * @return The decoded array of bytes. May be of length 0. Will be <code>null</code> if the legal characters
	 * (including '=') isn't divideable by 4.  (I.e. definitely corrupted).
	 */
	public final static byte[] decode(char[] sArr)
	{
		// Check special case
		int sLen = sArr != null ? sArr.length : 0;
		if (sLen == 0)
			return new byte[0];

		// Count illegal characters (including '\r', '\n') to know what size the returned array will be,
		// so we don't have to reallocate & copy it later.
		int sepCnt = 0; // Number of separator characters. (Actually illegal characters, but that's a bonus...)
		for (int i = 0; i < sLen; i++)  // If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out.
			if (IA[sArr[i]] < 0)
				sepCnt++;

		// Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045.
		if ((sLen - sepCnt) % 4 != 0)
			return null;

		int pad = 0;
		for (int i = sLen; i > 1 && IA[sArr[--i]] <= 0;)
			if (sArr[i] == '=')
				pad++;

		int len = ((sLen - sepCnt) * 6 >> 3) - pad;

		byte[] dArr = new byte[len];       // Preallocate byte[] of exact length

		for (int s = 0, d = 0; d < len;) {
			// Assemble three bytes into an int from four "valid" characters.
			int i = 0;
			for (int j = 0; j < 4; j++) {   // j only increased if a valid char was found.
				int c = IA[sArr[s++]];
				if (c >= 0)
				    i |= c << (18 - j * 6);
				else
					j--;
			}
			// Add the bytes
			dArr[d++] = (byte) (i >> 16);
			if (d < len) {
				dArr[d++]= (byte) (i >> 8);
				if (d < len)
					dArr[d++] = (byte) i;
			}
		}
		return dArr;
	}

	/** Decodes a BASE64 encoded char array that is known to be resonably well formatted. The method is about twice as
	 * fast as {@link #decode(char[])}. The preconditions are:<br>
	 * + The array must have a line length of 76 chars OR no line separators at all (one line).<br>
	 * + Line separator must be "\r\n", as specified in RFC 2045
	 * + The array must not contain illegal characters within the encoded string<br>
	 * + The array CAN have illegal characters at the beginning and end, those will be dealt with appropriately.<br>
	 * @param sArr The source array. Length 0 will return an empty array. <code>null</code> will throw an exception.
	 * @return The decoded array of bytes. May be of length 0.
	 */
	public final static byte[] decodeFast(char[] sArr)
	{
		// Check special case
		int sLen = sArr.length;
		if (sLen == 0)
			return new byte[0];

		int sIx = 0, eIx = sLen - 1;    // Start and end index after trimming.

		// Trim illegal chars from start
		while (sIx < eIx && IA[sArr[sIx]] < 0)
			sIx++;

		// Trim illegal chars from end
		while (eIx > 0 && IA[sArr[eIx]] < 0)
			eIx--;

		// get the padding count (=) (0, 1 or 2)
		int pad = sArr[eIx] == '=' ? (sArr[eIx - 1] == '=' ? 2 : 1) : 0;  // Count '=' at end.
		int cCnt = eIx - sIx + 1;   // Content count including possible separators
		int sepCnt = sLen > 76 ? (sArr[76] == '\r' ? cCnt / 78 : 0) << 1 : 0;

		int len = ((cCnt - sepCnt) * 6 >> 3) - pad; // The number of decoded bytes
		byte[] dArr = new byte[len];       // Preallocate byte[] of exact length

		// Decode all but the last 0 - 2 bytes.
		int d = 0;
		for (int cc = 0, eLen = (len / 3) * 3; d < eLen;) {
=====================================================================
cat sim.tight/fastjson.skmclauncher/51.i.0
cat sim.tight/fastjson.skmclauncher/51.m.0
	String getFirstName() {		return firstName;
	}

	void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/** @return last name of the committer; their surname or family name. */
	String getLastName() {
		return lastName;
	}

	void setLastName(String lastName) {
		this.lastName = lastName;
=====================================================================
cat sim.tight/jgit.agoncal-application-petstore-ee6/8.i.0
cat sim.tight/jgit.agoncal-application-petstore-ee6/8.m.0
    public static enum Level {        trace,
        debug,
        info,
        warn,
        error
=====================================================================
cat sim.tight/citrus.jline2/6.i.0
cat sim.tight/citrus.jline2/6.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/JDBM3.cdk/8.i.0
cat sim.tight/JDBM3.cdk/8.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/config-magic.jPOS/9.i.0
cat sim.tight/config-magic.jPOS/9.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.jPOS/8.i.0
cat sim.tight/config-magic.jPOS/8.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/springfaces.jcommander/7.i.0
cat sim.tight/springfaces.jcommander/7.m.0
			return result;		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
=====================================================================
cat sim.tight/JDBM3.nosql-unit/9.i.0
cat sim.tight/JDBM3.nosql-unit/9.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/query.jpatterns/9.i.0
cat sim.tight/query.jpatterns/9.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.jpatterns/6.i.0
cat sim.tight/citrus.jpatterns/6.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.jpatterns/9.i.0
cat sim.tight/citrus.jpatterns/9.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.jpatterns/7.i.0
cat sim.tight/citrus.jpatterns/7.m.0
    @Override    public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      }
      if (obj == null) {
        return false;
      }
      if (getClass() != obj.getClass()) {
        return false;
=====================================================================
cat sim.tight/citrus.jpatterns/8.i.0
cat sim.tight/citrus.jpatterns/8.m.0
	public String toString(String prefix) {		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public void dump(String prefix) {
		System.out.println(toString(prefix));
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
=====================================================================
cat sim.tight/MarkdownPapers.cdk/9.i.0
cat sim.tight/MarkdownPapers.cdk/9.m.0
    public void jjtOpen() {    }

    public void jjtClose() {
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
=====================================================================
cat sim.tight/MarkdownPapers.cdk/14.i.0
cat sim.tight/MarkdownPapers.cdk/14.m.0
public interface Node {
    /**
     * This method is called after the node has been made the current
     * node.  It indicates that child nodes can now be added to it.
     */
    public void jjtOpen();

    /**
     * This method is called after all the child nodes have been
     * added.
     */
    public void jjtClose();

    /**
     * This pair of methods are used to inform the node of its
     * parent.
     */
    public void jjtSetParent(Node n);

    public Node jjtGetParent();

    /**
     * This method tells the node to add its argument to the node's
     * list of children.
     */
    public void jjtAddChild(Node n, int i);

    /**
     * This method returns a child node.  The children are numbered
     * from zero, left to right.
     */
    public Node jjtGetChild(int i);

    /**
     * Return the number of children the node has.
     */
    public int jjtGetNumChildren();
=====================================================================
cat sim.tight/MarkdownPapers.cdk/8.i.0
cat sim.tight/MarkdownPapers.cdk/8.m.0
  public String getUsername() {    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
=====================================================================
cat sim.tight/jbehave-core.nosql-unit/8.i.0
cat sim.tight/jbehave-core.nosql-unit/8.m.0
    @BeforeClass    public static void setUpClass() throws Exception {
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
    }

    @Before
    public void setUp() {
=====================================================================
cat sim.tight/droolsjbpm-integration.cdk/6.i.0
cat sim.tight/droolsjbpm-integration.cdk/6.m.0
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
=====================================================================
cat sim.tight/droolsjbpm-integration.cdk/24.i.0
cat sim.tight/droolsjbpm-integration.cdk/24.m.0
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
=====================================================================
cat sim.tight/droolsjbpm-integration.cdk/28.i.0
cat sim.tight/droolsjbpm-integration.cdk/28.m.0
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
=====================================================================
cat sim.tight/droolsjbpm-integration.cdk/20.i.0
cat sim.tight/droolsjbpm-integration.cdk/20.m.0
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
=====================================================================
cat sim.tight/droolsjbpm-integration.jPOS/19.i.0
cat sim.tight/droolsjbpm-integration.jPOS/19.m.0
            new IFEP_LLCHAR  (0,  ""),            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
            new IFEP_LLCHAR  (0,  ""),
=====================================================================
cat sim.tight/droolsjbpm-integration.jPOS/28.i.0
cat sim.tight/droolsjbpm-integration.jPOS/28.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/JDBM3.caelum-stella/9.i.0
cat sim.tight/JDBM3.caelum-stella/9.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/query.json-schema-validator/8.i.0
cat sim.tight/query.json-schema-validator/8.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
=====================================================================
cat sim.tight/springfaces.caelum-stella/7.i.0
cat sim.tight/springfaces.caelum-stella/7.m.0
    protected void verifyException(Throwable e, String... matches)    {
        String msg = e.getMessage();
        String lmsg = (msg == null) ? "" : msg.toLowerCase();
        for (String match : matches) {
            String lmatch = match.toLowerCase();
            if (lmsg.indexOf(lmatch) >= 0) {
                return;
            }
        }
        fail("Expected an exception with one of substrings ("+Arrays.asList(matches)+"): got one with message \""+msg+"\"");
=====================================================================
cat sim.tight/low-gc-membuffers.java-classmate/8.i.0
cat sim.tight/low-gc-membuffers.java-classmate/8.m.0
        if (id == null) {            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        return true;
=====================================================================
cat sim.tight/JDBM3.hector-jpa/6.i.0
cat sim.tight/JDBM3.hector-jpa/6.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
=====================================================================
cat sim.tight/JDBM3.hector-jpa/7.i.0
cat sim.tight/JDBM3.hector-jpa/7.m.0
		result = prime * result + ((id == null) ? 0 : id.hashCode());		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
=====================================================================
cat sim.tight/JDBM3.hector-jpa/8.i.0
cat sim.tight/JDBM3.hector-jpa/8.m.0
        @Override        public boolean equals(Object o) {
            if (this == o)
                return true;
            if (o == null || getClass() != o.getClass())
                return false;
=====================================================================
cat sim.tight/jbehave-core.testng/6.i.0
cat sim.tight/jbehave-core.testng/6.m.0
                writer.writeStartElement(GraphMLTokens.KEY);                writer.writeAttribute(GraphMLTokens.ID, key);
                writer.writeAttribute(GraphMLTokens.FOR, GraphMLTokens.EDGE);
                writer.writeAttribute(GraphMLTokens.ATTR_NAME, key);
                writer.writeAttribute(GraphMLTokens.ATTR_TYPE, edgeKeyTypes.get(key));
                writer.writeEndElement();
=====================================================================
cat sim.tight/blueprints.nosql-unit/6.i.0
cat sim.tight/blueprints.nosql-unit/6.m.0
    private static Object typeCastValue(String key, String value, Map<String, String> keyTypes) {        String type = keyTypes.get(key);
        if (null == type || type.equals(GraphMLTokens.STRING))
            return value;
        else if (type.equals(GraphMLTokens.FLOAT))
            return Float.valueOf(value);
        else if (type.equals(GraphMLTokens.INT))
            return Integer.valueOf(value);
        else if (type.equals(GraphMLTokens.DOUBLE))
            return Double.valueOf(value);
        else if (type.equals(GraphMLTokens.BOOLEAN))
            return Boolean.valueOf(value);
        else if (type.equals(GraphMLTokens.LONG))
            return Long.valueOf(value);
        else
            return value;
=====================================================================
cat sim.tight/blueprints.nosql-unit/16.i.0
cat sim.tight/blueprints.nosql-unit/16.m.0
			while (reader.hasNext()) {
				Integer eventType = reader.next();
				if (eventType.equals(XMLEvent.START_ELEMENT)) {

					String elementName = reader.getName().getLocalPart();

					if (elementName.equals(GraphMLTokens.KEY)) {

						String id = reader.getAttributeValue(null, GraphMLTokens.ID);
						String attributeName = reader.getAttributeValue(null, GraphMLTokens.ATTR_NAME);
						String attributeType = reader.getAttributeValue(null, GraphMLTokens.ATTR_TYPE);
						keyIdMap.put(id, attributeName);
=====================================================================
cat sim.tight/blueprints.nosql-unit/9.i.0
cat sim.tight/blueprints.nosql-unit/9.m.0
				writer.writeStartElement(GraphMLTokens.DATA);				writer.writeAttribute(GraphMLTokens.KEY, key);
				Object value = edge.getProperty(key);
				if (null != value) {
					writer.writeCharacters(value.toString());
				}
				writer.writeEndElement();
			}
			writer.writeEndElement();
=====================================================================
cat sim.tight/blueprints.nosql-unit/7.i.0
cat sim.tight/blueprints.nosql-unit/7.m.0
    public static final String XML_SCHEMA_LOCATION_ATTRIBUTE = "schemaLocation";    public static final String GRAPHML = "graphml";
    public static final String XMLNS = "xmlns";
    public static final String GRAPHML_XMLNS = "http://graphml.graphdrawing.org/xmlns";
    public static final String G = "G";
    public static final String EDGEDEFAULT = "edgedefault";
    public static final String DIRECTED = "directed";
    public static final String KEY = "key";
    public static final String FOR = "for";
    public static final String ID = "id";
    public static final String ATTR_NAME = "attr.name";
    public static final String ATTR_TYPE = "attr.type";
    public static final String GRAPH = "graph";
    public static final String NODE = "node";
    public static final String EDGE = "edge";
    public static final String SOURCE = "source";
    public static final String TARGET = "target";
    public static final String DATA = "data";
    public static final String LABEL = "label";
    public static final String STRING = "string";
    public static final String FLOAT = "float";
    public static final String DOUBLE = "double";
    public static final String LONG = "long";
    public static final String BOOLEAN = "boolean";
    public static final String INT = "int";
    public static final String _DEFAULT = "_default";
=====================================================================
cat sim.tight/blueprints.nosql-unit/26.i.0
cat sim.tight/blueprints.nosql-unit/26.m.0
	public static String getStringType(final Object object) {		if (object instanceof String) {
			return GraphMLTokens.STRING;
		} else if (object instanceof Integer) {
			return GraphMLTokens.INT;
		} else if (object instanceof Long) {
			return GraphMLTokens.LONG;
		} else if (object instanceof Float) {
			return GraphMLTokens.FLOAT;
		} else if (object instanceof Double) {
			return GraphMLTokens.DOUBLE;
		} else if (object instanceof Boolean) {
			return GraphMLTokens.BOOLEAN;
		} else {
			return GraphMLTokens.STRING;
=====================================================================
cat sim.tight/blueprints.nosql-unit/15.i.0
cat sim.tight/blueprints.nosql-unit/15.m.0
                        for (String key : edge.getPropertyKeys()) {                            writer.writeStartElement(GraphMLTokens.DATA);
                            writer.writeAttribute(GraphMLTokens.KEY, key);
                            Object value = edge.getProperty(key);
                            if (null != value) {
                                writer.writeCharacters(value.toString());
                            }
                            writer.writeEndElement();
                        }
                        writer.writeEndElement();
=====================================================================
cat sim.tight/blueprints.nosql-unit/8.i.0
cat sim.tight/blueprints.nosql-unit/8.m.0
            case '0':            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
=====================================================================
cat sim.tight/jgit.WebWorks/10.i.0
cat sim.tight/jgit.WebWorks/10.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/JDBM3.jpatterns/9.i.0
cat sim.tight/JDBM3.jpatterns/9.m.0
	public Long getId() {		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
=====================================================================
cat sim.tight/query.fb-tools/8.i.0
cat sim.tight/query.fb-tools/8.m.0
    public void testVertexTestSuite() throws Exception {        this.stopWatch();
        doTestSuite(new VertexTestSuite(this));
        printTestPerformance("VertexTestSuite", this.stopWatch());
    }

    public void testEdgeTestSuite() throws Exception {
        this.stopWatch();
        doTestSuite(new EdgeTestSuite(this));
        printTestPerformance("EdgeTestSuite", this.stopWatch());
    }

    public void testGraphTestSuite() throws Exception {
        this.stopWatch();
        doTestSuite(new GraphTestSuite(this));
        printTestPerformance("GraphTestSuite", this.stopWatch());
    }

    public void testGraphMLReaderTestSuite() throws Exception {
        this.stopWatch();
        doTestSuite(new GraphMLReaderTestSuite(this));
        printTestPerformance("GraphMLReaderTestSuite", this.stopWatch());
    }

    public void testGMLReaderTestSuite() throws Exception {
        this.stopWatch();
        doTestSuite(new GMLReaderTestSuite(this));
        printTestPerformance("GMLReaderTestSuite", this.stopWatch());
    }

    public void testGraphSONReaderTestSuite() throws Exception {
        this.stopWatch();
        doTestSuite(new GraphSONReaderTestSuite(this));
        printTestPerformance("GraphSONReaderTestSuite", this.stopWatch());
    }

    public Graph generateGraph() {
=====================================================================
cat sim.tight/blueprints.frames/25.i.0
cat sim.tight/blueprints.frames/25.m.0
    public void testGMLReaderTestSuite() throws Exception {        this.stopWatch();
        doTestSuite(new GMLReaderTestSuite(this));
        printTestPerformance("GMLReaderTestSuite", this.stopWatch());
    }

    public void testGraphSONReaderTestSuite() throws Exception {
        this.stopWatch();
        doTestSuite(new GraphSONReaderTestSuite(this));
        printTestPerformance("GraphSONReaderTestSuite", this.stopWatch());
=====================================================================
cat sim.tight/blueprints.frames/8.i.0
cat sim.tight/blueprints.frames/8.m.0
    public void testVertexTestSuite() throws Exception {        this.stopWatch();
        doTestSuite(new VertexTestSuite(this));
        printTestPerformance("VertexTestSuite", this.stopWatch());
    }

    public void testEdgeTestSuite() throws Exception {
        this.stopWatch();
        doTestSuite(new EdgeTestSuite(this));
        printTestPerformance("EdgeTestSuite", this.stopWatch());
    }

    public void testGraphTestSuite() throws Exception {
        this.stopWatch();
        doTestSuite(new GraphTestSuite(this));
        printTestPerformance("GraphTestSuite", this.stopWatch());
=====================================================================
cat sim.tight/blueprints.frames/12.i.0
cat sim.tight/blueprints.frames/12.m.0
        private long   id;        private String name;

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
=====================================================================
cat sim.tight/fastjson.fb-tools/10.i.0
cat sim.tight/fastjson.fb-tools/10.m.0
    public Long getId() {        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
=====================================================================
cat sim.tight/fastjson.fb-tools/8.i.0
cat sim.tight/fastjson.fb-tools/8.m.0
    public String getDescription() {        return description;
    }

    void setDescription(String description) {
        this.description = description;
    }

    @Override
    public boolean equals(Object o) {
=====================================================================
cat sim.tight/command-me.agoncal-application-petstore-ee6/6.i.0
cat sim.tight/command-me.agoncal-application-petstore-ee6/6.m.0
            case '0':            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
=====================================================================
cat sim.tight/fastjson.jline2/10.i.0
cat sim.tight/fastjson.jline2/10.m.0
    public boolean equals(Object obj)    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.hs4j/7.i.0
cat sim.tight/config-magic.hs4j/7.m.0
        {"iexcl", "161"}, //inverted exclamation mark        {"cent", "162"}, //cent sign
        {"pound", "163"}, //pound sign
        {"curren", "164"}, //currency sign
        {"yen", "165"}, //yen sign = yuan sign
        {"brvbar", "166"}, //broken bar = broken vertical bar
        {"sect", "167"}, //section sign
        {"uml", "168"}, //diaeresis = spacing diaeresis
        {"copy", "169"}, // ? - copyright sign
        {"ordf", "170"}, //feminine ordinal indicator
        {"laquo", "171"}, //left-pointing double angle quotation mark = left pointing guillemet
        {"not", "172"}, //not sign
        {"shy", "173"}, //soft hyphen = discretionary hyphen
        {"reg", "174"}, // ? - registered trademark sign
        {"macr", "175"}, //macron = spacing macron = overline = APL overbar
        {"deg", "176"}, //degree sign
        {"plusmn", "177"}, //plus-minus sign = plus-or-minus sign
        {"sup2", "178"}, //superscript two = superscript digit two = squared
        {"sup3", "179"}, //superscript three = superscript digit three = cubed
        {"acute", "180"}, //acute accent = spacing acute
        {"micro", "181"}, //micro sign
        {"para", "182"}, //pilcrow sign = paragraph sign
        {"middot", "183"}, //middle dot = Georgian comma = Greek middle dot
        {"cedil", "184"}, //cedilla = spacing cedilla
        {"sup1", "185"}, //superscript one = superscript digit one
        {"ordm", "186"}, //masculine ordinal indicator
        {"raquo", "187"}, //right-pointing double angle quotation mark = right pointing guillemet
        {"frac14", "188"}, //vulgar fraction one quarter = fraction one quarter
        {"frac12", "189"}, //vulgar fraction one half = fraction one half
        {"frac34", "190"}, //vulgar fraction three quarters = fraction three quarters
        {"iquest", "191"}, //inverted question mark = turned question mark
        {"Agrave", "192"}, // ? - uppercase A, grave accent
        {"Aacute", "193"}, // ? - uppercase A, acute accent
        {"Acirc", "194"}, // ? - uppercase A, circumflex accent
        {"Atilde", "195"}, // ? - uppercase A, tilde
        {"Auml", "196"}, // ? - uppercase A, umlaut
        {"Aring", "197"}, // ? - uppercase A, ring
        {"AElig", "198"}, // ? - uppercase AE
        {"Ccedil", "199"}, // ? - uppercase C, cedilla
        {"Egrave", "200"}, // ? - uppercase E, grave accent
        {"Eacute", "201"}, // ? - uppercase E, acute accent
        {"Ecirc", "202"}, // ? - uppercase E, circumflex accent
        {"Euml", "203"}, // ? - uppercase E, umlaut
        {"Igrave", "204"}, // ? - uppercase I, grave accent
        {"Iacute", "205"}, // ? - uppercase I, acute accent
        {"Icirc", "206"}, // ? - uppercase I, circumflex accent
        {"Iuml", "207"}, // ? - uppercase I, umlaut
        {"ETH", "208"}, // ? - uppercase Eth, Icelandic
        {"Ntilde", "209"}, // ? - uppercase N, tilde
        {"Ograve", "210"}, // ? - uppercase O, grave accent
        {"Oacute", "211"}, // ? - uppercase O, acute accent
        {"Ocirc", "212"}, // ? - uppercase O, circumflex accent
        {"Otilde", "213"}, // ? - uppercase O, tilde
        {"Ouml", "214"}, // ? - uppercase O, umlaut
        {"times", "215"}, //multiplication sign
        {"Oslash", "216"}, // ? - uppercase O, slash
        {"Ugrave", "217"}, // ? - uppercase U, grave accent
        {"Uacute", "218"}, // ? - uppercase U, acute accent
        {"Ucirc", "219"}, // ? - uppercase U, circumflex accent
        {"Uuml", "220"}, // ? - uppercase U, umlaut
        {"Yacute", "221"}, // ? - uppercase Y, acute accent
        {"THORN", "222"}, // ? - uppercase THORN, Icelandic
        {"szlig", "223"}, // ? - lowercase sharps, German
        {"agrave", "224"}, // ? - lowercase a, grave accent
        {"aacute", "225"}, // ? - lowercase a, acute accent
        {"acirc", "226"}, // ? - lowercase a, circumflex accent
        {"atilde", "227"}, // ? - lowercase a, tilde
        {"auml", "228"}, // ? - lowercase a, umlaut
        {"aring", "229"}, // ? - lowercase a, ring
        {"aelig", "230"}, // ? - lowercase ae
        {"ccedil", "231"}, // ? - lowercase c, cedilla
        {"egrave", "232"}, // ? - lowercase e, grave accent
        {"eacute", "233"}, // ? - lowercase e, acute accent
        {"ecirc", "234"}, // ? - lowercase e, circumflex accent
        {"euml", "235"}, // ? - lowercase e, umlaut
        {"igrave", "236"}, // ? - lowercase i, grave accent
        {"iacute", "237"}, // ? - lowercase i, acute accent
        {"icirc", "238"}, // ? - lowercase i, circumflex accent
        {"iuml", "239"}, // ? - lowercase i, umlaut
        {"eth", "240"}, // ? - lowercase eth, Icelandic
        {"ntilde", "241"}, // ? - lowercase n, tilde
        {"ograve", "242"}, // ? - lowercase o, grave accent
        {"oacute", "243"}, // ? - lowercase o, acute accent
        {"ocirc", "244"}, // ? - lowercase o, circumflex accent
        {"otilde", "245"}, // ? - lowercase o, tilde
        {"ouml", "246"}, // ? - lowercase o, umlaut
        {"divide", "247"}, // division sign
        {"oslash", "248"}, // ? - lowercase o, slash
        {"ugrave", "249"}, // ? - lowercase u, grave accent
        {"uacute", "250"}, // ? - lowercase u, acute accent
        {"ucirc", "251"}, // ? - lowercase u, circumflex accent
        {"uuml", "252"}, // ? - lowercase u, umlaut
        {"yacute", "253"}, // ? - lowercase y, acute accent
        {"thorn", "254"}, // ? - lowercase thorn, Icelandic
        {"yuml", "255"}, // ? - lowercase y, umlaut
=====================================================================
cat sim.tight/citrus.wolips/95.i.0
cat sim.tight/citrus.wolips/95.m.0
        {"Alpha", "913"}, //greek capital letter alpha, U+0391 -->        {"Beta", "914"}, //greek capital letter beta, U+0392 -->
        {"Gamma", "915"}, //greek capital letter gamma,U+0393 ISOgrk3 -->
        {"Delta", "916"}, //greek capital letter delta,U+0394 ISOgrk3 -->
        {"Epsilon", "917"}, //greek capital letter epsilon, U+0395 -->
        {"Zeta", "918"}, //greek capital letter zeta, U+0396 -->
        {"Eta", "919"}, //greek capital letter eta, U+0397 -->
        {"Theta", "920"}, //greek capital letter theta,U+0398 ISOgrk3 -->
        {"Iota", "921"}, //greek capital letter iota, U+0399 -->
        {"Kappa", "922"}, //greek capital letter kappa, U+039A -->
        {"Lambda", "923"}, //greek capital letter lambda,U+039B ISOgrk3 -->
        {"Mu", "924"}, //greek capital letter mu, U+039C -->
        {"Nu", "925"}, //greek capital letter nu, U+039D -->
        {"Xi", "926"}, //greek capital letter xi, U+039E ISOgrk3 -->
        {"Omicron", "927"}, //greek capital letter omicron, U+039F -->
        {"Pi", "928"}, //greek capital letter pi, U+03A0 ISOgrk3 -->
        {"Rho", "929"}, //greek capital letter rho, U+03A1 -->
// <!-- there is no Sigmaf, and no U+03A2 character either -->
        {"Sigma", "931"}, //greek capital letter sigma,U+03A3 ISOgrk3 -->
        {"Tau", "932"}, //greek capital letter tau, U+03A4 -->
        {"Upsilon", "933"}, //greek capital letter upsilon,U+03A5 ISOgrk3 -->
        {"Phi", "934"}, //greek capital letter phi,U+03A6 ISOgrk3 -->
        {"Chi", "935"}, //greek capital letter chi, U+03A7 -->
        {"Psi", "936"}, //greek capital letter psi,U+03A8 ISOgrk3 -->
        {"Omega", "937"}, //greek capital letter omega,U+03A9 ISOgrk3 -->
        {"alpha", "945"}, //greek small letter alpha,U+03B1 ISOgrk3 -->
        {"beta", "946"}, //greek small letter beta, U+03B2 ISOgrk3 -->
        {"gamma", "947"}, //greek small letter gamma,U+03B3 ISOgrk3 -->
        {"delta", "948"}, //greek small letter delta,U+03B4 ISOgrk3 -->
        {"epsilon", "949"}, //greek small letter epsilon,U+03B5 ISOgrk3 -->
        {"zeta", "950"}, //greek small letter zeta, U+03B6 ISOgrk3 -->
        {"eta", "951"}, //greek small letter eta, U+03B7 ISOgrk3 -->
        {"theta", "952"}, //greek small letter theta,U+03B8 ISOgrk3 -->
        {"iota", "953"}, //greek small letter iota, U+03B9 ISOgrk3 -->
        {"kappa", "954"}, //greek small letter kappa,U+03BA ISOgrk3 -->
        {"lambda", "955"}, //greek small letter lambda,U+03BB ISOgrk3 -->
        {"mu", "956"}, //greek small letter mu, U+03BC ISOgrk3 -->
        {"nu", "957"}, //greek small letter nu, U+03BD ISOgrk3 -->
        {"xi", "958"}, //greek small letter xi, U+03BE ISOgrk3 -->
        {"omicron", "959"}, //greek small letter omicron, U+03BF NEW -->
        {"pi", "960"}, //greek small letter pi, U+03C0 ISOgrk3 -->
        {"rho", "961"}, //greek small letter rho, U+03C1 ISOgrk3 -->
        {"sigmaf", "962"}, //greek small letter final sigma,U+03C2 ISOgrk3 -->
        {"sigma", "963"}, //greek small letter sigma,U+03C3 ISOgrk3 -->
        {"tau", "964"}, //greek small letter tau, U+03C4 ISOgrk3 -->
        {"upsilon", "965"}, //greek small letter upsilon,U+03C5 ISOgrk3 -->
        {"phi", "966"}, //greek small letter phi, U+03C6 ISOgrk3 -->
        {"chi", "967"}, //greek small letter chi, U+03C7 ISOgrk3 -->
        {"psi", "968"}, //greek small letter psi, U+03C8 ISOgrk3 -->
        {"omega", "969"}, //greek small letter omega,U+03C9 ISOgrk3 -->
        {"thetasym", "977"}, //greek small letter theta symbol,U+03D1 NEW -->
        {"upsih", "978"}, //greek upsilon with hook symbol,U+03D2 NEW -->
        {"piv", "982"}, //greek pi symbol, U+03D6 ISOgrk3 -->
// <!-- General Punctuation -->
        {"bull", "8226"}, //bullet = black small circle,U+2022 ISOpub  -->
// <!-- bullet is NOT the same as bullet operator, U+2219 -->
        {"hellip", "8230"}, //horizontal ellipsis = three dot leader,U+2026 ISOpub  -->
        {"prime", "8242"}, //prime = minutes = feet, U+2032 ISOtech -->
        {"Prime", "8243"}, //double prime = seconds = inches,U+2033 ISOtech -->
        {"oline", "8254"}, //overline = spacing overscore,U+203E NEW -->
        {"frasl", "8260"}, //fraction slash, U+2044 NEW -->
// <!-- Letterlike Symbols -->
        {"weierp", "8472"}, //script capital P = power set= Weierstrass p, U+2118 ISOamso -->
        {"image", "8465"}, //blackletter capital I = imaginary part,U+2111 ISOamso -->
        {"real", "8476"}, //blackletter capital R = real part symbol,U+211C ISOamso -->
        {"trade", "8482"}, //trade mark sign, U+2122 ISOnum -->
        {"alefsym", "8501"}, //alef symbol = first transfinite cardinal,U+2135 NEW -->
// <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 although the 
//      same glyph could be used to depict both characters -->
// <!-- Arrows -->
        {"larr", "8592"}, //leftwards arrow, U+2190 ISOnum -->
        {"uarr", "8593"}, //upwards arrow, U+2191 ISOnum-->
        {"rarr", "8594"}, //rightwards arrow, U+2192 ISOnum -->
        {"darr", "8595"}, //downwards arrow, U+2193 ISOnum -->
        {"harr", "8596"}, //left right arrow, U+2194 ISOamsa -->
        {"crarr", "8629"}, //downwards arrow with corner leftwards= carriage return, U+21B5 NEW -->
        {"lArr", "8656"}, //leftwards double arrow, U+21D0 ISOtech -->
// <!-- ISO 10646 does not say that lArr is the same as the 'is implied by' 
//      arrow but also does not have any other character for that function. 
//      So ? lArr canbe used for 'is implied by' as ISOtech suggests -->
        {"uArr", "8657"}, //upwards double arrow, U+21D1 ISOamsa -->
        {"rArr", "8658"}, //rightwards double arrow,U+21D2 ISOtech -->
// <!-- ISO 10646 does not say this is the 'implies' character but does not
//      have another character with this function so ?rArr can be used for
//      'implies' as ISOtech suggests -->
        {"dArr", "8659"}, //downwards double arrow, U+21D3 ISOamsa -->
        {"hArr", "8660"}, //left right double arrow,U+21D4 ISOamsa -->
// <!-- Mathematical Operators -->
        {"forall", "8704"}, //for all, U+2200 ISOtech -->
        {"part", "8706"}, //partial differential, U+2202 ISOtech  -->
        {"exist", "8707"}, //there exists, U+2203 ISOtech -->
        {"empty", "8709"}, //empty set = null set = diameter,U+2205 ISOamso -->
        {"nabla", "8711"}, //nabla = backward difference,U+2207 ISOtech -->
        {"isin", "8712"}, //element of, U+2208 ISOtech -->
        {"notin", "8713"}, //not an element of, U+2209 ISOtech -->
        {"ni", "8715"}, //contains as member, U+220B ISOtech -->
// <!-- should there be a more memorable name than 'ni'? -->
        {"prod", "8719"}, //n-ary product = product sign,U+220F ISOamsb -->
// <!-- prod is NOT the same character as U+03A0 'greek capital letter pi' 
//      though the same glyph might be used for both -->
        {"sum", "8721"}, //n-ary summation, U+2211 ISOamsb -->
// <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma'
//      though the same glyph might be used for both -->
        {"minus", "8722"}, //minus sign, U+2212 ISOtech -->
        {"lowast", "8727"}, //asterisk operator, U+2217 ISOtech -->
        {"radic", "8730"}, //square root = radical sign,U+221A ISOtech -->
        {"prop", "8733"}, //proportional to, U+221D ISOtech -->
        {"infin", "8734"}, //infinity, U+221E ISOtech -->
        {"ang", "8736"}, //angle, U+2220 ISOamso -->
        {"and", "8743"}, //logical and = wedge, U+2227 ISOtech -->
        {"or", "8744"}, //logical or = vee, U+2228 ISOtech -->
        {"cap", "8745"}, //intersection = cap, U+2229 ISOtech -->
        {"cup", "8746"}, //union = cup, U+222A ISOtech -->
        {"int", "8747"}, //integral, U+222B ISOtech -->
        {"there4", "8756"}, //therefore, U+2234 ISOtech -->
        {"sim", "8764"}, //tilde operator = varies with = similar to,U+223C ISOtech -->
// <!-- tilde operator is NOT the same character as the tilde, U+007E,although
//      the same glyph might be used to represent both  -->
        {"cong", "8773"}, //approximately equal to, U+2245 ISOtech -->
        {"asymp", "8776"}, //almost equal to = asymptotic to,U+2248 ISOamsr -->
        {"ne", "8800"}, //not equal to, U+2260 ISOtech -->
        {"equiv", "8801"}, //identical to, U+2261 ISOtech -->
        {"le", "8804"}, //less-than or equal to, U+2264 ISOtech -->
        {"ge", "8805"}, //greater-than or equal to,U+2265 ISOtech -->
        {"sub", "8834"}, //subset of, U+2282 ISOtech -->
        {"sup", "8835"}, //superset of, U+2283 ISOtech -->
// <!-- note that nsup, 'not a superset of, U+2283' is not covered by the
//      Symbol font encoding and is not included. Should it be, for symmetry?
//      It is in ISOamsn  --> <!ENTITY nsub", "8836"},  
//      not a subset of, U+2284 ISOamsn -->
        {"sube", "8838"}, //subset of or equal to, U+2286 ISOtech -->
        {"supe", "8839"}, //superset of or equal to,U+2287 ISOtech -->
        {"oplus", "8853"}, //circled plus = direct sum,U+2295 ISOamsb -->
        {"otimes", "8855"}, //circled times = vector product,U+2297 ISOamsb -->
        {"perp", "8869"}, //up tack = orthogonal to = perpendicular,U+22A5 ISOtech -->
        {"sdot", "8901"}, //dot operator, U+22C5 ISOamsb -->
// <!-- dot operator is NOT the same character as U+00B7 middle dot -->
// <!-- Miscellaneous Technical -->
        {"lceil", "8968"}, //left ceiling = apl upstile,U+2308 ISOamsc  -->
        {"rceil", "8969"}, //right ceiling, U+2309 ISOamsc  -->
        {"lfloor", "8970"}, //left floor = apl downstile,U+230A ISOamsc  -->
        {"rfloor", "8971"}, //right floor, U+230B ISOamsc  -->
        {"lang", "9001"}, //left-pointing angle bracket = bra,U+2329 ISOtech -->
// <!-- lang is NOT the same character as U+003C 'less than' or U+2039 'single left-pointing angle quotation mark' -->
        {"rang", "9002"}, //right-pointing angle bracket = ket,U+232A ISOtech -->
// <!-- rang is NOT the same character as U+003E 'greater than' or U+203A 
//      'single right-pointing angle quotation mark' -->
// <!-- Geometric Shapes -->
        {"loz", "9674"}, //lozenge, U+25CA ISOpub -->
// <!-- Miscellaneous Symbols -->
        {"spades", "9824"}, //black spade suit, U+2660 ISOpub -->
// <!-- black here seems to mean filled as opposed to hollow -->
        {"clubs", "9827"}, //black club suit = shamrock,U+2663 ISOpub -->
        {"hearts", "9829"}, //black heart suit = valentine,U+2665 ISOpub -->
        {"diams", "9830"}, //black diamond suit, U+2666 ISOpub -->

// <!-- Latin Extended-A -->
        {"OElig", "338"}, //  -- latin capital ligature OE,U+0152 ISOlat2 -->
        {"oelig", "339"}, //  -- latin small ligature oe, U+0153 ISOlat2 -->
// <!-- ligature is a misnomer, this is a separate character in some languages -->
        {"Scaron", "352"}, //  -- latin capital letter S with caron,U+0160 ISOlat2 -->
        {"scaron", "353"}, //  -- latin small letter s with caron,U+0161 ISOlat2 -->
        {"Yuml", "376"}, //  -- latin capital letter Y with diaeresis,U+0178 ISOlat2 -->
// <!-- Spacing Modifier Letters -->
        {"circ", "710"}, //  -- modifier letter circumflex accent,U+02C6 ISOpub -->
        {"tilde", "732"}, //small tilde, U+02DC ISOdia -->
// <!-- General Punctuation -->
        {"ensp", "8194"}, //en space, U+2002 ISOpub -->
        {"emsp", "8195"}, //em space, U+2003 ISOpub -->
        {"thinsp", "8201"}, //thin space, U+2009 ISOpub -->
        {"zwnj", "8204"}, //zero width non-joiner,U+200C NEW RFC 2070 -->
        {"zwj", "8205"}, //zero width joiner, U+200D NEW RFC 2070 -->
        {"lrm", "8206"}, //left-to-right mark, U+200E NEW RFC 2070 -->
        {"rlm", "8207"}, //right-to-left mark, U+200F NEW RFC 2070 -->
        {"ndash", "8211"}, //en dash, U+2013 ISOpub -->
        {"mdash", "8212"}, //em dash, U+2014 ISOpub -->
        {"lsquo", "8216"}, //left single quotation mark,U+2018 ISOnum -->
        {"rsquo", "8217"}, //right single quotation mark,U+2019 ISOnum -->
        {"sbquo", "8218"}, //single low-9 quotation mark, U+201A NEW -->
        {"ldquo", "8220"}, //left double quotation mark,U+201C ISOnum -->
        {"rdquo", "8221"}, //right double quotation mark,U+201D ISOnum -->
        {"bdquo", "8222"}, //double low-9 quotation mark, U+201E NEW -->
        {"dagger", "8224"}, //dagger, U+2020 ISOpub -->
        {"Dagger", "8225"}, //double dagger, U+2021 ISOpub -->
        {"permil", "8240"}, //per mille sign, U+2030 ISOtech -->
        {"lsaquo", "8249"}, //single left-pointing angle quotation mark,U+2039 ISO proposed -->
// <!-- lsaquo is proposed but not yet ISO standardized -->
        {"rsaquo", "8250"}, //single right-pointing angle quotation mark,U+203A ISO proposed -->
// <!-- rsaquo is proposed but not yet ISO standardized -->
        {"euro", "8364"}, //  -- euro sign, U+20AC NEW -->
    };

    /**
     * <p>The set of entities supported by standard XML.</p>
     */
    public static final Entities XML;

    /**
     * <p>The set of entities supported by HTML 3.2.</p>
     */
    public static final Entities HTML32;

    /**
     * <p>The set of entities supported by HTML 4.0.</p>
     */
    public static final Entities HTML40;
=====================================================================
cat sim.tight/citrus.wolips/153.i.0
cat sim.tight/citrus.wolips/153.m.0
      return result;   }

   @Override
   public boolean equals(Object obj)
   {
      if(this == obj)
         return true;
      if(obj == null)
         return false;
      if(getClass() != obj.getClass())
         return false;
=====================================================================
cat sim.tight/Dempsy.nosql-unit/9.i.0
cat sim.tight/Dempsy.nosql-unit/9.m.0
		return result;	}

	@Override
	public boolean equals(final Object obj)
	{
		if (this == obj)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (getClass() != obj.getClass())
		{
			return false;
=====================================================================
cat sim.tight/Ektorp.jesque/9.i.0
cat sim.tight/Ektorp.jesque/9.m.0
	@Override	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
=====================================================================
cat sim.tight/springfaces.json-schema-validator/6.i.0
cat sim.tight/springfaces.json-schema-validator/6.m.0
    if (this == obj) {      return true;
    }

    if (obj == null) {
      return false;
    }

    if (getClass() != obj.getClass()) {
      return false;
=====================================================================
cat sim.tight/otto.json-schema-validator/6.i.0
cat sim.tight/otto.json-schema-validator/6.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/query.testng/9.i.0
cat sim.tight/query.testng/9.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/query.testng/8.i.0
cat sim.tight/query.testng/8.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.json-schema-validator/8.i.0
cat sim.tight/config-magic.json-schema-validator/8.m.0
      return result;    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
=====================================================================
cat sim.tight/fastjson.restfb/9.i.0
cat sim.tight/fastjson.restfb/9.m.0
        case '1':        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
=====================================================================
cat sim.tight/loop.antlr/6.i.0
cat sim.tight/loop.antlr/6.m.0
        case '1':        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
=====================================================================
cat sim.tight/loop.nbscala/6.i.0
cat sim.tight/loop.nbscala/6.m.0
      return result;   }

   @Override
   public boolean equals(Object obj)
   {
      if(this == obj)
         return true;
      if(obj == null)
         return false;
      if(getClass() != obj.getClass())
         return false;
=====================================================================
cat sim.tight/Dempsy.jcommander/9.i.0
cat sim.tight/Dempsy.jcommander/9.m.0
        public int getX() {            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getY() {
            return y;
        }

        public void setY(int y) {
            this.y = y;
=====================================================================
cat sim.tight/fastjson.SpoutcraftAPI/8.i.0
cat sim.tight/fastjson.SpoutcraftAPI/8.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.nosql-unit/6.i.0
cat sim.tight/citrus.nosql-unit/6.m.0
			return result;		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
=====================================================================
cat sim.tight/citrus.nosql-unit/9.i.0
cat sim.tight/citrus.nosql-unit/9.m.0
			return result;		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
=====================================================================
cat sim.tight/citrus.nosql-unit/7.i.0
cat sim.tight/citrus.nosql-unit/7.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.nosql-unit/8.i.0
cat sim.tight/citrus.nosql-unit/8.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/fastjson.cdk/8.i.0
cat sim.tight/fastjson.cdk/8.m.0
  private static final List<String> V = Arrays.asList("a", "b", "c", "d");
  @DataProvider
  public Object[][] variable() {
    return new Object[][] {
        new Object[] { 0, V.subList(0, 0), V },
        new Object[] { 1, V.subList(0, 1), V.subList(1, 4) },
        new Object[] { 2, V.subList(0, 2), V.subList(2, 4) },
        new Object[] { 3, V.subList(0, 3), V.subList(3, 4) },
        new Object[] { 4, V.subList(0, 4), V.subList(4, 4) },
=====================================================================
cat sim.tight/airline.jcommander/9.i.0
cat sim.tight/airline.jcommander/9.m.0
    Assert.assertEquals(args.debug, expected);  }

  public void booleanArity1() {
    argsBoolean1(new String[] {}, Boolean.FALSE);
    argsBoolean1(new String[] { "-debug", "true" }, Boolean.TRUE);
  }

  public void booleanArity0() {
    argsBoolean0(new String[] {}, Boolean.FALSE);
    argsBoolean0(new String[] { "-debug"}, Boolean.TRUE);
=====================================================================
cat sim.tight/airline.jcommander/7.i.0
cat sim.tight/airline.jcommander/7.m.0
    @DataProvider    public static Object[][] f()
    {
        return new Integer[][]{
                new Integer[]{3, 5, 1},
                new Integer[]{3, 8, 1},
                new Integer[]{3, 12, 2},
                new Integer[]{8, 12, 2},
                new Integer[]{9, 10, 1},
=====================================================================
cat sim.tight/airline.jcommander/8.i.0
cat sim.tight/airline.jcommander/8.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/config-magic.caelum-stella/9.i.0
cat sim.tight/config-magic.caelum-stella/9.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/config-magic.caelum-stella/8.i.0
cat sim.tight/config-magic.caelum-stella/8.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/Ektorp.hector-jpa/7.i.0
cat sim.tight/Ektorp.hector-jpa/7.m.0
		return result;	}

	@Override
	public boolean equals(final Object obj)
	{
		if (this == obj)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (getClass() != obj.getClass())
		{
			return false;
=====================================================================
cat sim.tight/config-magic.jesque/9.i.0
cat sim.tight/config-magic.jesque/9.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.jesque/8.i.0
cat sim.tight/config-magic.jesque/8.m.0
    public String getName() {        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
=====================================================================
cat sim.tight/JTailPlus.dsi-tools/8.i.0
cat sim.tight/JTailPlus.dsi-tools/8.m.0
      return result;    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
=====================================================================
cat sim.tight/JDBM3.restfb/9.i.0
cat sim.tight/JDBM3.restfb/9.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.functionaljava/6.i.0
cat sim.tight/citrus.functionaljava/6.m.0
       return result;    }

    @Override
    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
       if (getClass() != obj.getClass())
          return false;
=====================================================================
cat sim.tight/citrus.functionaljava/9.i.0
cat sim.tight/citrus.functionaljava/9.m.0
       return result;    }

    @Override
    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
=====================================================================
cat sim.tight/citrus.functionaljava/7.i.0
cat sim.tight/citrus.functionaljava/7.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.functionaljava/8.i.0
cat sim.tight/citrus.functionaljava/8.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/config-magic.testng/9.i.0
cat sim.tight/config-magic.testng/9.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.testng/8.i.0
cat sim.tight/config-magic.testng/8.m.0
	@Override	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
=====================================================================
cat sim.tight/Ektorp.cdk/8.i.0
cat sim.tight/Ektorp.cdk/8.m.0
            "",            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
=====================================================================
cat sim.tight/droolsjbpm-integration.antlr/28.i.0
cat sim.tight/droolsjbpm-integration.antlr/28.m.0
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
            {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true},
=====================================================================
cat sim.tight/droolsjbpm-integration.antlr/20.i.0
cat sim.tight/droolsjbpm-integration.antlr/20.m.0
    public String getName() {        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
=====================================================================
cat sim.tight/fastjson.agoncal-application-petstore-ee6/8.i.0
cat sim.tight/fastjson.agoncal-application-petstore-ee6/8.m.0
			maxNextCharInd += i;			return;
		} catch (java.io.IOException e) {
			--bufpos;
			backup(0);
			if (tokenBegin == -1)
				tokenBegin = bufpos;
			throw e;
		}
	}

	public char BeginToken() throws java.io.IOException {
		tokenBegin = -1;
		char c = readChar();
		tokenBegin = bufpos;
		return c;
	}

	protected void UpdateLineColumn(char c) {
		column++;
		if (prevCharIsLF) {
			prevCharIsLF = false;
			line += (column = 1);
		} else if (prevCharIsCR) {
			prevCharIsCR = false;
			if (c == '\n') {
				prevCharIsLF = true;
			} else
				line += (column = 1);
		}
		switch (c) {
		case '\r':
			prevCharIsCR = true;
			break;
		case '\n':
			prevCharIsLF = true;
			break;
		case '\t':
			column--;
=====================================================================
cat sim.tight/MarkdownPapers.wolips/33.i.0
cat sim.tight/MarkdownPapers.wolips/33.m.0
         } while(i != startsAt);      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
=====================================================================
cat sim.tight/MarkdownPapers.wolips/6.i.0
cat sim.tight/MarkdownPapers.wolips/6.m.0
		inputStream = dstream;		line = startline;
		column = startcolumn - 1;
		if (buffer == null || buffersize != buffer.length) {
			available = bufsize = buffersize;
			buffer = new char[buffersize];
			bufline = new int[buffersize];
			bufcolumn = new int[buffersize];
		}
		prevCharIsLF = prevCharIsCR = false;
		tokenBegin = inBuf = maxNextCharInd = 0;
		bufpos = -1;
=====================================================================
cat sim.tight/MarkdownPapers.wolips/11.i.0
cat sim.tight/MarkdownPapers.wolips/11.m.0
protected char curChar;/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
=====================================================================
cat sim.tight/MarkdownPapers.wolips/16.i.0
cat sim.tight/MarkdownPapers.wolips/16.m.0
		return retval;	}

	/**
	 * The end of line string for this machine.
	 */
	protected String eol = System.getProperty("line.separator", "\n");

	/**
	 * Used to convert raw characters to their escaped version when these raw
	 * version cannot be used as part of an ASCII string literal.
	 */
	protected String add_escapes(String str) {
		StringBuffer retval = new StringBuffer();
		char ch;
		for (int i = 0; i < str.length(); i++) {
			switch (str.charAt(i)) {
			case 0:
				continue;
			case '\b':
				retval.append("\\b");
				continue;
			case '\t':
				retval.append("\\t");
				continue;
			case '\n':
				retval.append("\\n");
				continue;
			case '\f':
				retval.append("\\f");
				continue;
			case '\r':
				retval.append("\\r");
				continue;
			case '\"':
				retval.append("\\\"");
				continue;
			case '\'':
				retval.append("\\\'");
				continue;
			case '\\':
				retval.append("\\\\");
				continue;
			default:
				if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
					String s = "0000" + Integer.toString(ch, 16);
					retval.append("\\u" + s.substring(s.length() - 4, s.length()));
				} else {
					retval.append(ch);
				}
				continue;
			}
		}
		return retval.toString();
=====================================================================
cat sim.tight/MarkdownPapers.wolips/41.i.0
cat sim.tight/MarkdownPapers.wolips/41.m.0
		inputStream = dstream;		line = startline;
		column = startcolumn - 1;
		available = bufsize = buffersize;
		buffer = new char[buffersize];
		bufline = new int[buffersize];
		bufcolumn = new int[buffersize];
=====================================================================
cat sim.tight/MarkdownPapers.wolips/7.i.0
cat sim.tight/MarkdownPapers.wolips/7.m.0
  protected void ExpandBuff(boolean wrapAround)  {
    char[] newbuffer = new char[bufsize + 2048];
    int newbufline[] = new int[bufsize + 2048];
    int newbufcolumn[] = new int[bufsize + 2048];

    try
    {
      if (wrapAround)
      {
        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
        buffer = newbuffer;

        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
        bufline = newbufline;

        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
        bufcolumn = newbufcolumn;

        maxNextCharInd = (bufpos += (bufsize - tokenBegin));
      }
      else
      {
        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
        buffer = newbuffer;

        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
        bufline = newbufline;

        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
        bufcolumn = newbufcolumn;

        maxNextCharInd = (bufpos -= tokenBegin);
      }
    }
    catch (Throwable t)
    {
      throw new Error(t.getMessage());
    }


    bufsize += 2048;
    available = bufsize;
    tokenBegin = 0;
  }

  protected void FillBuff() throws java.io.IOException
  {
    if (maxNextCharInd == available)
    {
      if (available == bufsize)
      {
        if (tokenBegin > 2048)
        {
          bufpos = maxNextCharInd = 0;
          available = tokenBegin;
        }
        else if (tokenBegin < 0)
          bufpos = maxNextCharInd = 0;
        else
          ExpandBuff(false);
      }
      else if (available > tokenBegin)
        available = bufsize;
      else if ((tokenBegin - available) < 2048)
        ExpandBuff(true);
      else
        available = tokenBegin;
    }

    int i;
    try {
      if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1)
      {
        inputStream.close();
        throw new java.io.IOException();
=====================================================================
cat sim.tight/MarkdownPapers.wolips/50.i.0
cat sim.tight/MarkdownPapers.wolips/50.m.0
  public int getLine() {    return bufline[bufpos];
  }

  /** Get token end column number. */
  public int getEndColumn() {
    return bufcolumn[bufpos];
  }

  /** Get token end line number. */
  public int getEndLine() {
     return bufline[bufpos];
  }

  /** Get token beginning column number. */
  public int getBeginColumn() {
    return bufcolumn[tokenBegin];
  }

  /** Get token beginning line number. */
  public int getBeginLine() {
    return bufline[tokenBegin];
  }

/** Backup a number of characters. */
  public void backup(int amount) {

    inBuf += amount;
    if ((bufpos -= amount) < 0)
      bufpos += bufsize;
=====================================================================
cat sim.tight/MarkdownPapers.wolips/14.i.0
cat sim.tight/MarkdownPapers.wolips/14.m.0
   return t;}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;
=====================================================================
cat sim.tight/MarkdownPapers.wolips/10.i.0
cat sim.tight/MarkdownPapers.wolips/10.m.0
	private final void jjCheckNAdd(int state) {		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
=====================================================================
cat sim.tight/MarkdownPapers.wolips/15.i.0
cat sim.tight/MarkdownPapers.wolips/15.m.0
  static final int LEXICAL_ERROR = 0;
  /**
   * An attempt was made to create a second instance of a static token manager.
   */
  static final int STATIC_LEXER_ERROR = 1;

  /**
   * Tried to change to an invalid lexical state.
   */
  static final int INVALID_LEXICAL_STATE = 2;

  /**
   * Detected (and bailed out of) an infinite loop in the token manager.
   */
  static final int LOOP_DETECTED = 3;

  /**
   * Indicates the reason why the exception is thrown. It will have
   * one of the above 4 values.
   */
  int errorCode;

  /**
   * Replaces unprintable characters by their escaped (or unicode escaped)
   * equivalents in the given string
   */
  protected static final String addEscapes(String str) {
    StringBuffer retval = new StringBuffer();
    char ch;
    for (int i = 0; i < str.length(); i++) {
      switch (str.charAt(i))
      {
        case 0 :
          continue;
        case '\b':
          retval.append("\\b");
          continue;
        case '\t':
          retval.append("\\t");
          continue;
        case '\n':
          retval.append("\\n");
          continue;
        case '\f':
          retval.append("\\f");
          continue;
        case '\r':
          retval.append("\\r");
          continue;
        case '\"':
          retval.append("\\\"");
          continue;
        case '\'':
          retval.append("\\\'");
          continue;
        case '\\':
          retval.append("\\\\");
          continue;
        default:
          if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
            String s = "0000" + Integer.toString(ch, 16);
            retval.append("\\u" + s.substring(s.length() - 4, s.length()));
          } else {
            retval.append(ch);
          }
          continue;
      }
    }
    return retval.toString();
=====================================================================
cat sim.tight/MarkdownPapers.wolips/44.i.0
cat sim.tight/MarkdownPapers.wolips/44.m.0
   int i = 1;   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
=====================================================================
cat sim.tight/MarkdownPapers.wolips/8.i.0
cat sim.tight/MarkdownPapers.wolips/8.m.0
      return result;   }

   @Override
   public boolean equals(Object obj)
   {
      if(this == obj)
         return true;
      if(obj == null)
         return false;
      if(getClass() != obj.getClass())
         return false;
=====================================================================
cat sim.tight/Dempsy.testng/9.i.0
cat sim.tight/Dempsy.testng/9.m.0
  @Override  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
=====================================================================
cat sim.tight/Dempsy.testng/8.i.0
cat sim.tight/Dempsy.testng/8.m.0
         return result;      }

      @Override
      public boolean equals(Object obj)
      {
         if (this == obj)
            return true;
         if (obj == null)
            return false;
=====================================================================
cat sim.tight/springfaces.extensions/7.i.0
cat sim.tight/springfaces.extensions/7.m.0
   @Override   public boolean equals(Object obj)
   {
      if(this == obj)
         return true;
      if(obj == null)
         return false;
      if(getClass() != obj.getClass())
         return false;
=====================================================================
cat sim.tight/Dempsy.cdk/8.i.0
cat sim.tight/Dempsy.cdk/8.m.0
      return result;   }

   @Override
   public boolean equals(Object obj)
   {
      if(this == obj)
         return true;
      if(obj == null)
         return false;
      if(getClass() != obj.getClass())
         return false;
=====================================================================
cat sim.tight/Dempsy.restfb/9.i.0
cat sim.tight/Dempsy.restfb/9.m.0
         return result;      }

      @Override
      public boolean equals(Object obj)
      {
         if (this == obj)
            return true;
         if (obj == null)
            return false;
         if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/config-magic.extensions/9.i.0
cat sim.tight/config-magic.extensions/9.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.extensions/8.i.0
cat sim.tight/config-magic.extensions/8.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.cdk/6.i.0
cat sim.tight/citrus.cdk/6.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/citrus.cdk/8.i.0
cat sim.tight/citrus.cdk/8.m.0
    public boolean equals(Object obj) {        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/fastjson.hs4j/7.i.0
cat sim.tight/fastjson.hs4j/7.m.0
        public boolean equals(Object obj) {            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.hs4j/7.i.0
cat sim.tight/citrus.hs4j/7.m.0
			return result;		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
=====================================================================
cat sim.tight/fastjson.nosql-unit/9.i.0
cat sim.tight/fastjson.nosql-unit/9.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.jesque/6.i.0
cat sim.tight/citrus.jesque/6.m.0
		return result;	}

	@Override
	public boolean equals(final Object obj)
	{
		if (this == obj)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (getClass() != obj.getClass())
		{
			return false;
=====================================================================
cat sim.tight/citrus.jesque/9.i.0
cat sim.tight/citrus.jesque/9.m.0
		return result;	}

	@Override
	public boolean equals(final Object obj)
	{
		if (this == obj)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
=====================================================================
cat sim.tight/citrus.jesque/7.i.0
cat sim.tight/citrus.jesque/7.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.jesque/8.i.0
cat sim.tight/citrus.jesque/8.m.0
	String getFirstName() {		return firstName;
	}

	void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/** @return last name of the committer; their surname or family name. */
	String getLastName() {
		return lastName;
	}

	void setLastName(String lastName) {
		this.lastName = lastName;
=====================================================================
cat sim.tight/jgit.hector-jpa/8.i.0
cat sim.tight/jgit.hector-jpa/8.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/query.hector-jpa/7.i.0
cat sim.tight/query.hector-jpa/7.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/fastjson.jcommander/9.i.0
cat sim.tight/fastjson.jcommander/9.m.0
      return result;    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
=====================================================================
cat sim.tight/springfaces.restfb/7.i.0
cat sim.tight/springfaces.restfb/7.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/query.jcommander/9.i.0
cat sim.tight/query.jcommander/9.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/JDBM3.testng/9.i.0
cat sim.tight/JDBM3.testng/9.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/JDBM3.testng/8.i.0
cat sim.tight/JDBM3.testng/8.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/fastjson.hector-jpa/7.i.0
cat sim.tight/fastjson.hector-jpa/7.m.0
            case '0':            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
=====================================================================
cat sim.tight/fastjson.WebWorks/10.i.0
cat sim.tight/fastjson.WebWorks/10.m.0
    public Long getId() {        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
=====================================================================
cat sim.tight/query.agoncal-application-petstore-ee6/6.i.0
cat sim.tight/query.agoncal-application-petstore-ee6/6.m.0
                case '0':                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
=====================================================================
cat sim.tight/jgit.antlr/10.i.0
cat sim.tight/jgit.antlr/10.m.0
    @Override    protected void setUp() throws Exception {
        super.setUp();

    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
=====================================================================
cat sim.tight/JEmailer.testng/6.i.0
cat sim.tight/JEmailer.testng/6.m.0
		return result;	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
=====================================================================
cat sim.tight/Ektorp.jpatterns/9.i.0
cat sim.tight/Ektorp.jpatterns/9.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if ( this == obj ) return true;
        if ( obj == null ) return false;
        if ( getClass() != obj.getClass() ) return false;
=====================================================================
cat sim.tight/droolsjbpm-integration.droolsjbpm-knowledge/6.i.0
cat sim.tight/droolsjbpm-integration.droolsjbpm-knowledge/6.m.0
        result = prime * result + ((name == null) ? 0 : name.hashCode());        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if ( this == obj ) return true;
        if ( obj == null ) return false;
        if ( getClass() != obj.getClass() ) return false;
=====================================================================
cat sim.tight/droolsjbpm-integration.droolsjbpm-knowledge/7.i.0
cat sim.tight/droolsjbpm-integration.droolsjbpm-knowledge/7.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/fastjson.testng/9.i.0
cat sim.tight/fastjson.testng/9.m.0
    private String name;    private String value;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
=====================================================================
cat sim.tight/fastjson.testng/10.i.0
cat sim.tight/fastjson.testng/10.m.0
  @Override  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
=====================================================================
cat sim.tight/fastjson.testng/8.i.0
cat sim.tight/fastjson.testng/8.m.0
	public String getFirstName() {		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
=====================================================================
cat sim.tight/spring-data-commons.agoncal-application-petstore-ee6/8.i.0
cat sim.tight/spring-data-commons.agoncal-application-petstore-ee6/8.m.0
	public boolean equals(Object obj) {		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
=====================================================================
cat sim.tight/JDBM3.hs4j/7.i.0
cat sim.tight/JDBM3.hs4j/7.m.0
       return result;    }

    @Override
    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
=====================================================================
cat sim.tight/springfaces.functionaljava/7.i.0
cat sim.tight/springfaces.functionaljava/7.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.jcommander/6.i.0
cat sim.tight/citrus.jcommander/6.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/citrus.jcommander/9.i.0
cat sim.tight/citrus.jcommander/9.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/citrus.jcommander/7.i.0
cat sim.tight/citrus.jcommander/7.m.0
    @Override    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
=====================================================================
cat sim.tight/citrus.jcommander/8.i.0
cat sim.tight/citrus.jcommander/8.m.0
					case '0':					case '1':
					case '2':
					case '3':
					case '4':
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
=====================================================================
cat sim.tight/jgit.jline2/10.i.0
cat sim.tight/jgit.jline2/10.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
=====================================================================
cat sim.tight/jsoup.liblinear-java/6.i.0
cat sim.tight/jsoup.liblinear-java/6.m.0
    @Override    public boolean equals(Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
=====================================================================
cat sim.tight/storm-esper.testng/6.i.0
cat sim.tight/storm-esper.testng/6.m.0
        new Object[] { i++ },        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
=====================================================================
cat sim.tight/droolsjbpm-integration.testng/20.i.0
cat sim.tight/droolsjbpm-integration.testng/20.m.0
    @Override    public boolean equals(Object obj) {
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/snacktory.CraftBukkitPlusPlus/6.i.0
cat sim.tight/snacktory.CraftBukkitPlusPlus/6.m.0
      return result;   }

   @Override
   public boolean equals(Object obj)
   {
      if(this == obj)
         return true;
      if(obj == null)
         return false;
      if(getClass() != obj.getClass())
         return false;
=====================================================================
cat sim.tight/Dempsy.functionaljava/9.i.0
cat sim.tight/Dempsy.functionaljava/9.m.0
    @Override    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
       if (getClass() != obj.getClass())
          return false;
=====================================================================
cat sim.tight/Dempsy.functionaljava/8.i.0
cat sim.tight/Dempsy.functionaljava/8.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.caelum-stella/6.i.0
cat sim.tight/citrus.caelum-stella/6.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/citrus.caelum-stella/9.i.0
cat sim.tight/citrus.caelum-stella/9.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
=====================================================================
cat sim.tight/citrus.caelum-stella/7.i.0
cat sim.tight/citrus.caelum-stella/7.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/citrus.caelum-stella/8.i.0
cat sim.tight/citrus.caelum-stella/8.m.0
    if (this == obj) {      return true;
    }

    if (obj == null) {
      return false;
    }

    if (getClass() != obj.getClass()) {
      return false;
=====================================================================
cat sim.tight/otto.restfb/6.i.0
cat sim.tight/otto.restfb/6.m.0
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
=====================================================================
cat sim.tight/css-selectors.cdk/21.i.0
cat sim.tight/css-selectors.cdk/21.m.0
		C40C3V.addAtom(new Atom("C")); // 1		C40C3V.addAtom(new Atom("C")); // 2
		C40C3V.addAtom(new Atom("C")); // 3
		C40C3V.addAtom(new Atom("C")); // 4
		C40C3V.addAtom(new Atom("C")); // 5
		C40C3V.addAtom(new Atom("C")); // 6
		C40C3V.addAtom(new Atom("C")); // 7
		C40C3V.addAtom(new Atom("C")); // 8
		C40C3V.addAtom(new Atom("C")); // 9 
		C40C3V.addAtom(new Atom("C")); // 10
		C40C3V.addAtom(new Atom("C")); // 11
		C40C3V.addAtom(new Atom("C")); // 12
		C40C3V.addAtom(new Atom("C")); // 13
		C40C3V.addAtom(new Atom("C")); // 14
		C40C3V.addAtom(new Atom("C")); // 15
		C40C3V.addAtom(new Atom("C")); // 16
		C40C3V.addAtom(new Atom("C")); // 17
		C40C3V.addAtom(new Atom("C")); // 18
		C40C3V.addAtom(new Atom("C")); // 19 
		C40C3V.addAtom(new Atom("C")); // 20
=====================================================================
cat sim.tight/css-selectors.cdk/20.i.0
cat sim.tight/css-selectors.cdk/20.m.0
    @Override    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
=====================================================================
cat sim.tight/command-me.testng/6.i.0
cat sim.tight/command-me.testng/6.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
=====================================================================
cat sim.tight/Ektorp.testng/9.i.0
cat sim.tight/Ektorp.testng/9.m.0
	@Override	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
=====================================================================
cat sim.tight/Ektorp.testng/8.i.0
cat sim.tight/Ektorp.testng/8.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if ( this == obj ) return true;
        if ( obj == null ) return false;
        if ( getClass() != obj.getClass() ) return false;
=====================================================================
cat sim.tight/droolsjbpm-integration.liblinear-java/6.i.0
cat sim.tight/droolsjbpm-integration.liblinear-java/6.m.0
    public String getFirstName() {        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
=====================================================================
cat sim.tight/droolsjbpm-integration.hector-jpa/8.i.0
cat sim.tight/droolsjbpm-integration.hector-jpa/8.m.0
      return result;    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      }
      if (obj == null) {
        return false;
      }
      if (getClass() != obj.getClass()) {
        return false;
=====================================================================
cat sim.tight/config-magic.jpatterns/9.i.0
cat sim.tight/config-magic.jpatterns/9.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.jpatterns/8.i.0
cat sim.tight/config-magic.jpatterns/8.m.0
    @Override    public boolean equals(Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
=====================================================================
cat sim.tight/airline.testng/6.i.0
cat sim.tight/airline.testng/6.m.0
         return result;      }

      @Override
      public boolean equals(Object obj)
      {
         if (this == obj)
            return true;
         if (obj == null)
            return false;
         if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/fastjson.extensions/9.i.0
cat sim.tight/fastjson.extensions/9.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/query.jPOS/9.i.0
cat sim.tight/query.jPOS/9.m.0
    @Override    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/JDBM3.json-schema-validator/8.i.0
cat sim.tight/JDBM3.json-schema-validator/8.m.0
    public String getFirstName()    {
        return firstName;
    }

    /**
     * Get the person's middle name.
     *
     * @return the middle name
     */
    public String getMiddleName()
    {
        return middleName;
    }

    /**
     * Get the person's last name.
     *
     * @return the last name
     */
    public String getLastName()
    {
        return lastName;
=====================================================================
cat sim.tight/eurekastreams.restfb/6.i.0
cat sim.tight/eurekastreams.restfb/6.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
=====================================================================
cat sim.tight/jsoup.droolsjbpm-knowledge/6.i.0
cat sim.tight/jsoup.droolsjbpm-knowledge/6.m.0
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
=====================================================================
cat sim.tight/css-selectors.jPOS/19.i.0
cat sim.tight/css-selectors.jPOS/19.m.0
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
=====================================================================
cat sim.tight/css-selectors.jPOS/21.i.0
cat sim.tight/css-selectors.jPOS/21.m.0
	public boolean equals(Object obj) {		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
=====================================================================
cat sim.tight/Dempsy.hs4j/7.i.0
cat sim.tight/Dempsy.hs4j/7.m.0
	@Override	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
=====================================================================
cat sim.tight/springfaces.cdk/6.i.0
cat sim.tight/springfaces.cdk/6.m.0
    public String getName() {        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
=====================================================================
cat sim.tight/JTailPlus.agoncal-application-petstore-ee6/8.i.0
cat sim.tight/JTailPlus.agoncal-application-petstore-ee6/8.m.0
			return result;		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
=====================================================================
cat sim.tight/query.nosql-unit/9.i.0
cat sim.tight/query.nosql-unit/9.m.0
              case '0':              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
=====================================================================
cat sim.tight/fastjson.nbscala/10.i.0
cat sim.tight/fastjson.nbscala/10.m.0
        case '0':        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
=====================================================================
cat sim.tight/fastjson.nbscala/8.i.0
cat sim.tight/fastjson.nbscala/8.m.0
        return result;    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/fastjson.caelum-stella/9.i.0
cat sim.tight/fastjson.caelum-stella/9.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.hector-jpa/6.i.0
cat sim.tight/citrus.hector-jpa/6.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/citrus.hector-jpa/7.i.0
cat sim.tight/citrus.hector-jpa/7.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/springfaces.jPOS/7.i.0
cat sim.tight/springfaces.jPOS/7.m.0
		return result;	}

	@Override
	public boolean equals(final Object obj)
	{
		if (this == obj)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (getClass() != obj.getClass())
		{
			return false;
=====================================================================
cat sim.tight/JDBM3.jesque/9.i.0
cat sim.tight/JDBM3.jesque/9.m.0
                case '0':                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
=====================================================================
cat sim.tight/fastjson.antlr/10.i.0
cat sim.tight/fastjson.antlr/10.m.0
      return result;   }

   @Override
   public boolean equals(Object obj)
   {
      if(this == obj)
         return true;
      if(obj == null)
         return false;
      if(getClass() != obj.getClass())
         return false;
=====================================================================
cat sim.tight/Dempsy.jesque/9.i.0
cat sim.tight/Dempsy.jesque/9.m.0
		return result;	}

	@Override
	public boolean equals(final Object obj)
	{
		if (this == obj)
		{
			return true;
		}
		if (obj == null)
		{
			return false;
		}
		if (getClass() != obj.getClass())
		{
			return false;
=====================================================================
cat sim.tight/query.jesque/9.i.0
cat sim.tight/query.jesque/9.m.0
    public boolean equals(final Object obj) {        if ( this == obj ) {
            return true;
        }
        if ( obj == null ) {
            return false;
        }
        if ( getClass() != obj.getClass() ) {
            return false;
=====================================================================
cat sim.tight/droolsjbpm-integration.json-schema-validator/7.i.0
cat sim.tight/droolsjbpm-integration.json-schema-validator/7.m.0
    return result;  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/springfaces.testng/7.i.0
cat sim.tight/springfaces.testng/7.m.0
      private int memoizedSerializedSize = -1;      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
=====================================================================
cat sim.tight/jgit.OSM-binary/6.i.0
cat sim.tight/jgit.OSM-binary/6.m.0
    private byte memoizedIsInitialized = -1;    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
=====================================================================
cat sim.tight/jgit.OSM-binary/9.i.0
cat sim.tight/jgit.OSM-binary/9.m.0
    private int memoizedSerializedSize = -1;    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
=====================================================================
cat sim.tight/jgit.OSM-binary/7.i.0
cat sim.tight/jgit.OSM-binary/7.m.0
      private byte memoizedIsInitialized = -1;      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
=====================================================================
cat sim.tight/jgit.OSM-binary/10.i.0
cat sim.tight/jgit.OSM-binary/10.m.0
          java.io.InputStream input,          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
=====================================================================
cat sim.tight/jgit.OSM-binary/8.i.0
cat sim.tight/jgit.OSM-binary/8.m.0
        case '1':        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
=====================================================================
cat sim.tight/loop.stringtemplate4/6.i.0
cat sim.tight/loop.stringtemplate4/6.m.0
        new Object[] { i++ },        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
        new Object[] { i++ },
=====================================================================
cat sim.tight/css-selectors.testng/20.i.0
cat sim.tight/css-selectors.testng/20.m.0
    if (this == obj) {      return true;
    }

    if (obj == null) {
      return false;
    }

    if (getClass() != obj.getClass()) {
      return false;
=====================================================================
cat sim.tight/otto.hs4j/6.i.0
cat sim.tight/otto.hs4j/6.m.0
      return result;    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
=====================================================================
cat sim.tight/Ektorp.restfb/9.i.0
cat sim.tight/Ektorp.restfb/9.m.0
    public String getName() {        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
=====================================================================
cat sim.tight/JTailPlus.swagger-codegen/8.i.0
cat sim.tight/JTailPlus.swagger-codegen/8.m.0
	public boolean equals(Object obj) {		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
=====================================================================
cat sim.tight/query.hs4j/7.i.0
cat sim.tight/query.hs4j/7.m.0
       return result;    }

    @Override
    public boolean equals(Object obj) {
       if (this == obj)
          return true;
       if (obj == null)
          return false;
       if (getClass() != obj.getClass())
          return false;
=====================================================================
cat sim.tight/config-magic.functionaljava/9.i.0
cat sim.tight/config-magic.functionaljava/9.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.functionaljava/8.i.0
cat sim.tight/config-magic.functionaljava/8.m.0
    @Override    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/droolsjbpm-integration.CraftBukkit-Bleeding/6.i.0
cat sim.tight/droolsjbpm-integration.CraftBukkit-Bleeding/6.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.cdk/8.i.0
cat sim.tight/config-magic.cdk/8.m.0
    public String getFirstName() {        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
=====================================================================
cat sim.tight/droolsjbpm-integration.agoncal-application-petstore-ee6/8.i.0
cat sim.tight/droolsjbpm-integration.agoncal-application-petstore-ee6/8.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.jPOS/6.i.0
cat sim.tight/citrus.jPOS/6.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.jPOS/9.i.0
cat sim.tight/citrus.jPOS/9.m.0
            return result;        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
=====================================================================
cat sim.tight/citrus.jPOS/7.i.0
cat sim.tight/citrus.jPOS/7.m.0
        @Override        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (getClass() != obj.getClass()) {
                return false;
=====================================================================
cat sim.tight/citrus.jPOS/8.i.0
cat sim.tight/citrus.jPOS/8.m.0
    public boolean equals(final Object obj) {        if ( this == obj ) {
            return true;
        }
        if ( obj == null ) {
            return false;
        }
        if ( getClass() != obj.getClass() ) {
            return false;
=====================================================================
cat sim.tight/droolsjbpm-integration.hs4j/7.i.0
cat sim.tight/droolsjbpm-integration.hs4j/7.m.0
	public boolean equals(Object obj) {		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
=====================================================================
cat sim.tight/Ektorp.hs4j/7.i.0
cat sim.tight/Ektorp.hs4j/7.m.0
    @Override    public boolean equals(Object obj) {
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/snacktory.CraftBukkit/6.i.0
cat sim.tight/snacktory.CraftBukkit/6.m.0
    @Override    public boolean equals(final Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
=====================================================================
cat sim.tight/Dempsy.json-schema-validator/8.i.0
cat sim.tight/Dempsy.json-schema-validator/8.m.0
      return result;    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
=====================================================================
cat sim.tight/config-magic.restfb/9.i.0
cat sim.tight/config-magic.restfb/9.m.0
    @Override    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
=====================================================================
cat sim.tight/config-magic.restfb/8.i.0
cat sim.tight/config-magic.restfb/8.m.0
    @Override    public synchronized void mark(int readlimit) {
        in.mark(readlimit);
    }

    @Override
    public synchronized void reset() throws IOException {
        in.reset();
    }

    @Override
=====================================================================
cat sim.tight/jgit.skmclauncher/7.i.0
cat sim.tight/jgit.skmclauncher/7.m.0
    return result;  }

  /* (non-Javadoc)
   * @see java.lang.Object#equals(java.lang.Object)
   */
  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
=====================================================================
cat sim.tight/config-magic.hector-jpa/7.i.0
cat sim.tight/config-magic.hector-jpa/7.m.0
